
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDEQUAL ARROW BREAK CASE CHAR CHARACTER COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVEQUAL DIVIDE DO DOUBLE ELLIPSIS ELSE ENUM EQ EQUALS FLOAT FOR GE GOTO GT IDENTIFIER IF INCREMENT INT INTEGER LAND LBRACE LBRACKET LE LNOT LONG LOR LPAREN LSHIFT LSHIFTEQUAL LT MINUS MINUSEQUAL MODEQUAL MODULO NE NOT OR OREQUAL PERIOD PLUS PLUSEQUAL RBRACE RBRACKET RETURN RPAREN RSHIFT RSHIFTEQUAL SEMI SHORT SIGNED SIZEOF STRING STRUCT SWITCH TERNARY TIMES TIMESEQUAL UNION UNSIGNED VOID VOLATILE WHILE XOR XOREQUAL translation_unit : external_declaration\n\t| translation_unit external_declaration\n     external_declaration : function_definition\n\t| declaration\n     function_definition : declaration_specifiers declarator declaration_list compound_statement\n\t| declaration_specifiers declarator compound_statement\n\t| declarator declaration_list compound_statement\n\t| declarator compound_statement\n     primary_expression  : IDENTIFIER\n    | STRING\n    | INTEGER\n    | CHARACTER\n    | FLOAT\n    | LPAREN expression RPAREN\n     postfix_expression : primary_expression\n\t| postfix_expression LBRACKET expression RBRACKET\n\t| postfix_expression LPAREN RPAREN\n\t| postfix_expression LPAREN argument_expression_list RPAREN\n\t| postfix_expression PERIOD IDENTIFIER\n\t| postfix_expression ARROW IDENTIFIER\n\t| postfix_expression INCREMENT\n\t| postfix_expression DECREMENT\n     argument_expression_list : assignment_expression\n\t| argument_expression_list COMMA assignment_expression\n     unary_expression : postfix_expression\n\t| INCREMENT unary_expression\n\t| DECREMENT unary_expression\n\t| unary_operator cast_expression\n\t| SIZEOF unary_expression\n\t| SIZEOF LPAREN type_name RPAREN\n     unary_operator : MODULO\n\t| TIMES\n\t| PLUS\n\t| MINUS\n\t| NOT\n\t| LNOT\n     cast_expression : unary_expression\n\t| LPAREN type_name RPAREN cast_expression\n     multiplicative_expression : cast_expression\n\t| multiplicative_expression TIMES cast_expression\n\t| multiplicative_expression DIVIDE cast_expression\n\t| multiplicative_expression MODULO cast_expression\n     additive_expression : multiplicative_expression\n\t| additive_expression PLUS multiplicative_expression\n\t| additive_expression MINUS multiplicative_expression\n     shift_expression : additive_expression\n\t| shift_expression LSHIFT additive_expression\n\t| shift_expression RSHIFT additive_expression\n     relational_expression : shift_expression\n\t| relational_expression LT shift_expression\n\t| relational_expression GT shift_expression\n\t| relational_expression LE shift_expression\n\t| relational_expression GE shift_expression\n     equality_expression : relational_expression\n\t| equality_expression EQ relational_expression\n\t| equality_expression NE relational_expression\n     and_expression : equality_expression\n\t| and_expression AND equality_expression\n     exclusive_or_expression : and_expression\n\t| exclusive_or_expression XOR and_expression\n     inclusive_or_expression : exclusive_or_expression\n\t| inclusive_or_expression OR exclusive_or_expression\n     logical_and_expression : inclusive_or_expression\n\t| logical_and_expression LAND inclusive_or_expression\n     logical_or_expression : logical_and_expression\n\t| logical_or_expression LOR logical_and_expression\n     conditional_expression : logical_or_expression\n\t| logical_or_expression TERNARY expression COLON conditional_expression\n     assignment_expression : conditional_expression\n\t| unary_expression assignment_operator assignment_expression\n     assignment_operator : EQUALS\n\t| TIMESEQUAL\n\t| DIVEQUAL\n\t| MODEQUAL\n\t| PLUSEQUAL\n\t| MINUSEQUAL\n\t| LSHIFTEQUAL \n\t| RSHIFTEQUAL \n\t| ANDEQUAL\n\t| XOREQUAL\n\t| OREQUAL\n     expression : assignment_expression\n\t| expression COMMA assignment_expression\n     constant_expression : conditional_expression\n     declaration : declaration_specifiers SEMI\n\t| declaration_specifiers init_declarator_list SEMI\n     declaration_specifiers : type_specifier\n\t| type_specifier declaration_specifiers\n\t| type_qualifier\n\t| type_qualifier declaration_specifiers\n     init_declarator_list : init_declarator\n\t| init_declarator_list COMMA init_declarator\n     init_declarator : declarator\n\t| declarator EQUALS initializer\n     type_specifier : VOID\n\t| CHAR\n\t| SHORT\n\t| INT\n\t| LONG\n\t| FLOAT\n\t| DOUBLE\n\t| SIGNED\n\t| UNSIGNED\n\t| struct_or_union_specifier\n\t| enum_specifier\n     struct_or_union_specifier : struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE\n\t| struct_or_union LBRACE struct_declaration_list RBRACE\n\t| struct_or_union IDENTIFIER\n     struct_or_union : STRUCT\n\t| UNION\n     struct_declaration : specifier_qualifier_list struct_declarator_list SEMI\n     struct_declaration_list : struct_declaration\n\t| struct_declaration_list struct_declaration\n     struct_declarator_list : struct_declarator\n\t| struct_declarator_list COMMA struct_declarator\n     struct_declarator : declarator\n\t| COLON constant_expression\n\t| declarator COLON constant_expression\n     specifier_qualifier_list : type_specifier specifier_qualifier_list\n\t| type_specifier\n\t| type_qualifier specifier_qualifier_list\n\t| type_qualifier\n     enum_specifier : ENUM LBRACE enumerator_list RBRACE\n\t| ENUM IDENTIFIER LBRACE enumerator_list RBRACE\n\t| ENUM IDENTIFIER\n     enumerator_list : enumerator\n\t| enumerator_list COMMA enumerator\n     enumerator : IDENTIFIER\n\t| IDENTIFIER EQUALS constant_expression\n     type_qualifier : CONST\n\t| VOLATILE\n     declarator : pointer direct_declarator\n\t| direct_declarator\n     direct_declarator : IDENTIFIER\n\t| LPAREN declarator RPAREN\n\t| direct_declarator LBRACKET constant_expression RBRACKET\n\t| direct_declarator LBRACKET RBRACKET\n\t| direct_declarator LPAREN parameter_type_list RPAREN\n\t| direct_declarator LPAREN identifier_list RPAREN\n\t| direct_declarator LPAREN RPAREN\n     pointer : TIMES\n\t| TIMES type_qualifier_list\n\t| TIMES pointer\n\t| TIMES type_qualifier_list pointer\n     type_qualifier_list : type_qualifier\n\t| type_qualifier_list type_qualifier\n     parameter_type_list : parameter_list\n\t| parameter_list COMMA ELLIPSIS\n     parameter_list : parameter_declaration\n\t| parameter_list COMMA parameter_declaration\n     parameter_declaration : declaration_specifiers declarator\n\t| declaration_specifiers abstract_declarator\n\t| declaration_specifiers\n     identifier_list : IDENTIFIER\n\t| identifier_list COMMA IDENTIFIER\n     type_name : specifier_qualifier_list\n\t| specifier_qualifier_list abstract_declarator\n     abstract_declarator : pointer\n\t| direct_abstract_declarator\n\t| pointer direct_abstract_declarator\n     direct_abstract_declarator : LPAREN abstract_declarator RPAREN\n\t| LBRACKET RBRACKET\n\t| LBRACKET constant_expression RBRACKET\n\t| direct_abstract_declarator LBRACKET RBRACKET\n\t| direct_abstract_declarator LBRACKET constant_expression RBRACKET\n\t| LPAREN RPAREN\n\t| LPAREN parameter_type_list RPAREN\n\t| direct_abstract_declarator LPAREN RPAREN\n\t| direct_abstract_declarator LPAREN parameter_type_list RPAREN\n     initializer : assignment_expression\n\t| LBRACE initializer_list RBRACE\n\t| LBRACE initializer_list COMMA RBRACE\n     initializer_list : initializer\n\t| initializer_list COMMA initializer\n     statement : labeled_statement\n\t| compound_statement\n\t| expression_statement\n\t| selection_statement\n\t| iteration_statement\n\t| jump_statement\n     labeled_statement : IDENTIFIER COLON statement\n\t| CASE constant_expression COLON statement\n\t| DEFAULT COLON statement\n     compound_statement : LBRACE RBRACE\n\t| LBRACE statement_list RBRACE\n\t| LBRACE declaration_list RBRACE\n\t| LBRACE declaration_list statement_list RBRACE\n     declaration_list : declaration\n\t| declaration_list declaration\n     statement_list : statement\n\t| statement_list statement\n     expression_statement : SEMI\n\t| expression SEMI\n     selection_statement : IF LPAREN expression RPAREN statement\n\t| IF LPAREN expression RPAREN statement ELSE statement\n\t| SWITCH LPAREN expression RPAREN statement\n     iteration_statement : WHILE LPAREN expression RPAREN statement\n\t| DO statement WHILE LPAREN expression RPAREN SEMI\n\t| FOR LPAREN expression_statement expression_statement RPAREN statement\n\t| FOR LPAREN expression_statement expression_statement expression RPAREN statement\n     jump_statement : GOTO IDENTIFIER SEMI\n\t| CONTINUE SEMI\n\t| BREAK SEMI\n\t| RETURN SEMI\n\t| RETURN expression SEMI\n    '
    
_lr_action_items = {'VOID':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[11,11,-1,-3,-4,11,11,11,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,11,-85,11,-8,-188,11,-132,11,-108,11,-125,11,-6,-86,-7,-189,-184,11,11,-100,-137,11,-140,-135,11,11,-112,11,11,-5,-185,-186,11,-136,-138,-139,11,11,11,-107,-113,-123,-187,11,11,-106,-111,-124,]),'CHAR':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[12,12,-1,-3,-4,12,12,12,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,12,-85,12,-8,-188,12,-132,12,-108,12,-125,12,-6,-86,-7,-189,-184,12,12,-100,-137,12,-140,-135,12,12,-112,12,12,-5,-185,-186,12,-136,-138,-139,12,12,12,-107,-113,-123,-187,12,12,-106,-111,-124,]),'SHORT':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[13,13,-1,-3,-4,13,13,13,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,13,-85,13,-8,-188,13,-132,13,-108,13,-125,13,-6,-86,-7,-189,-184,13,13,-100,-137,13,-140,-135,13,13,-112,13,13,-5,-185,-186,13,-136,-138,-139,13,13,13,-107,-113,-123,-187,13,13,-106,-111,-124,]),'INT':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[14,14,-1,-3,-4,14,14,14,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,14,-85,14,-8,-188,14,-132,14,-108,14,-125,14,-6,-86,-7,-189,-184,14,14,-100,-137,14,-140,-135,14,14,-112,14,14,-5,-185,-186,14,-136,-138,-139,14,14,14,-107,-113,-123,-187,14,14,-106,-111,-124,]),'LONG':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[15,15,-1,-3,-4,15,15,15,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,15,-85,15,-8,-188,15,-132,15,-108,15,-125,15,-6,-86,-7,-189,-184,15,15,-100,-137,15,-140,-135,15,15,-112,15,15,-5,-185,-186,15,-136,-138,-139,15,15,15,-107,-113,-123,-187,15,15,-106,-111,-124,]),'FLOAT':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,44,45,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,73,77,80,85,87,92,93,94,96,99,100,101,102,103,104,118,121,125,133,134,135,136,138,139,144,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,223,224,225,226,227,231,234,236,240,241,242,243,247,250,254,255,256,288,289,295,296,298,302,304,305,306,308,309,310,311,312,315,328,329,330,332,338,340,341,342,343,344,],[16,16,-1,-3,-4,16,16,16,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,16,-85,16,-8,-188,87,-132,123,16,-108,16,-125,16,-6,123,-86,-7,-189,-184,123,87,-190,-175,-176,-177,-178,-179,-180,-192,123,87,123,123,-100,123,123,123,123,-31,-32,-33,-34,-35,-36,-137,87,-140,-135,16,16,-112,16,16,-5,123,-185,-191,-186,123,123,123,-193,123,123,123,123,123,-202,-203,-204,123,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,123,123,123,123,123,87,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-136,-138,-139,16,16,123,16,-107,-113,123,-123,123,-187,-181,123,-183,123,16,123,-201,-205,123,16,-106,-111,123,-124,123,-182,123,123,123,123,123,123,123,-194,-196,-197,123,123,-199,123,-195,-198,-200,]),'DOUBLE':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[17,17,-1,-3,-4,17,17,17,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,17,-85,17,-8,-188,17,-132,17,-108,17,-125,17,-6,-86,-7,-189,-184,17,17,-100,-137,17,-140,-135,17,17,-112,17,17,-5,-185,-186,17,-136,-138,-139,17,17,17,-107,-113,-123,-187,17,17,-106,-111,-124,]),'SIGNED':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[18,18,-1,-3,-4,18,18,18,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,18,-85,18,-8,-188,18,-132,18,-108,18,-125,18,-6,-86,-7,-189,-184,18,18,-100,-137,18,-140,-135,18,18,-112,18,18,-5,-185,-186,18,-136,-138,-139,18,18,18,-107,-113,-123,-187,18,18,-106,-111,-124,]),'UNSIGNED':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[19,19,-1,-3,-4,19,19,19,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,19,-85,19,-8,-188,19,-132,19,-108,19,-125,19,-6,-86,-7,-189,-184,19,19,-100,-137,19,-140,-135,19,19,-112,19,19,-5,-185,-186,19,-136,-138,-139,19,19,19,-107,-113,-123,-187,19,19,-106,-111,-124,]),'CONST':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,31,32,33,36,37,38,39,43,45,46,48,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,132,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[22,22,-1,-3,-4,22,22,22,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,22,-134,-2,22,-85,22,-8,-188,22,-132,22,22,-145,-108,22,-125,22,-6,-86,-7,-189,-184,22,22,-100,-137,22,-140,-146,-135,22,22,-112,22,22,-5,-185,-186,22,-136,-138,-139,22,22,22,-107,-113,-123,-187,22,22,-106,-111,-124,]),'VOLATILE':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,31,32,33,36,37,38,39,43,45,46,48,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,132,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[23,23,-1,-3,-4,23,23,23,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,23,-134,-2,23,-85,23,-8,-188,23,-132,23,23,-145,-108,23,-125,23,-6,-86,-7,-189,-184,23,23,-100,-137,23,-140,-146,-135,23,23,-112,23,23,-5,-185,-186,23,-136,-138,-139,23,23,23,-107,-113,-123,-187,23,23,-106,-111,-124,]),'TIMES':([0,1,2,3,4,5,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,31,33,37,38,39,40,41,42,44,46,48,50,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,85,87,89,91,92,93,94,95,96,98,99,100,101,102,103,104,106,107,108,115,120,121,122,123,130,132,137,138,139,144,147,149,150,151,152,153,155,156,157,158,161,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,223,224,226,231,232,233,234,236,240,241,242,243,246,247,250,254,255,256,261,264,265,279,280,281,282,283,288,295,297,298,302,304,305,306,307,308,309,310,311,312,313,314,315,316,328,329,330,332,338,340,341,342,343,344,],[24,24,-1,-3,-4,24,-87,-89,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,24,24,-2,-85,-8,-188,100,24,-88,-90,100,24,-145,-108,-125,-6,100,-86,24,-7,-189,-184,100,100,-190,-175,-176,-177,-178,-179,-180,-192,-9,100,100,100,100,-13,-37,-25,100,100,100,-39,100,-15,-31,-32,-33,-34,-35,-36,-10,-11,-12,211,-37,100,-9,-13,24,-146,24,-120,-122,-5,100,-185,-191,-186,100,100,100,-193,100,100,24,100,100,100,-202,-203,-204,100,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,100,100,100,100,-21,-22,-26,100,-27,-28,-29,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,24,100,-107,100,-119,-121,-123,100,-187,-181,100,-183,-14,100,24,100,-201,-205,-17,-19,-20,211,211,-40,-41,-42,100,-106,24,100,-124,100,-182,100,-38,100,100,100,100,100,-16,-18,100,-30,-194,-196,-197,100,100,-199,100,-195,-198,-200,]),'IDENTIFIER':([0,1,2,3,4,5,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,33,37,38,39,40,41,42,44,45,46,47,48,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,77,80,82,85,87,92,93,94,96,99,100,101,102,103,104,121,130,131,132,137,138,139,143,144,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,217,221,223,224,226,231,232,233,234,235,236,240,241,242,243,247,254,255,256,288,295,297,298,302,304,305,306,308,309,310,311,312,315,328,329,330,332,338,340,341,342,343,344,],[25,25,-1,-3,-4,25,-87,-89,25,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-141,25,50,53,-109,-110,-2,-85,-8,-188,72,25,-88,-90,122,128,-142,-143,-145,-108,142,-125,-6,122,-86,25,-7,-189,-184,72,72,-190,-175,-176,-177,-178,-179,-180,-192,122,122,72,166,122,-100,122,122,122,122,-31,-32,-33,-34,-35,-36,122,25,-144,-146,25,-120,-122,142,-5,122,-185,-191,-186,72,72,72,-193,122,122,122,122,122,-202,-203,-204,122,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,122,122,122,122,264,265,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,284,25,25,122,-107,122,-119,-121,-123,142,122,-187,-181,72,-183,122,122,-201,-205,122,-106,25,122,-124,122,-182,72,72,72,122,122,122,122,-194,-196,-197,72,72,-199,72,-195,-198,-200,]),'LPAREN':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,31,33,37,38,39,40,41,42,43,44,46,47,48,50,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,76,77,78,79,80,81,85,87,91,92,93,94,96,98,99,100,101,102,103,104,106,107,108,118,121,122,123,125,130,131,132,133,137,138,139,144,147,149,150,151,152,153,155,156,157,158,161,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,221,222,223,224,226,231,232,233,234,236,240,241,242,243,246,247,249,250,253,254,255,256,261,264,265,287,288,290,293,295,297,298,302,304,305,306,308,309,310,311,312,313,314,315,317,319,321,322,323,328,329,330,332,336,337,338,340,341,342,343,344,],[26,26,-1,-3,-4,26,-87,-89,26,45,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-141,-134,26,-2,-85,-8,-188,77,26,-88,-90,45,121,-142,-143,-145,-108,-125,-6,77,-86,26,-7,-189,-184,77,77,-190,-175,-176,-177,-178,-179,-180,-192,-9,121,158,77,162,163,77,165,77,-13,186,192,192,121,196,-15,-31,-32,-33,-34,-35,-36,-10,-11,-12,-137,77,-9,-13,-140,223,-144,-146,-135,26,-120,-122,-5,77,-185,-191,-186,77,77,77,-193,77,77,250,77,77,77,-202,-203,-204,77,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,77,121,77,77,-21,-22,77,77,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-136,-138,-139,223,289,223,121,-107,121,-119,-121,-123,121,-187,-181,77,-183,-14,121,250,250,310,77,-201,-205,-17,-19,-20,289,121,-166,-162,-106,26,121,-124,77,-182,77,77,77,77,77,121,-16,-18,77,-164,-168,-161,-167,-163,-194,-196,-197,77,-165,-169,77,-199,77,-195,-198,-200,]),'ENUM':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[28,28,-1,-3,-4,28,28,28,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,28,-85,28,-8,-188,28,-132,28,-108,28,-125,28,-6,-86,-7,-189,-184,28,28,-100,-137,28,-140,-135,28,28,-112,28,28,-5,-185,-186,28,-136,-138,-139,28,28,28,-107,-113,-123,-187,28,28,-106,-111,-124,]),'STRUCT':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[29,29,-1,-3,-4,29,29,29,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,29,-85,29,-8,-188,29,-132,29,-108,29,-125,29,-6,-86,-7,-189,-184,29,29,-100,-137,29,-140,-135,29,29,-112,29,29,-5,-185,-186,29,-136,-138,-139,29,29,29,-107,-113,-123,-187,29,29,-106,-111,-124,]),'UNION':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,31,32,33,36,37,38,39,43,45,50,51,53,54,55,57,59,60,61,63,77,87,118,121,125,133,134,135,136,138,139,144,149,151,196,214,215,216,218,223,225,226,227,234,240,250,289,295,296,302,],[30,30,-1,-3,-4,30,30,30,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-2,30,-85,30,-8,-188,30,-132,30,-108,30,-125,30,-6,-86,-7,-189,-184,30,30,-100,-137,30,-140,-135,30,30,-112,30,30,-5,-185,-186,30,-136,-138,-139,30,30,30,-107,-113,-123,-187,30,30,-106,-111,-124,]),'$end':([1,2,3,4,31,33,37,55,57,59,61,144,149,151,240,],[0,-1,-3,-4,-2,-85,-8,-6,-86,-7,-184,-5,-185,-186,-187,]),'SEMI':([5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,32,33,34,35,38,39,40,41,42,43,50,53,57,60,61,62,63,64,65,66,67,68,69,70,71,72,75,80,83,84,85,86,87,88,89,90,91,95,97,98,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,122,123,125,133,145,146,148,149,150,151,152,153,155,156,165,166,167,168,169,170,189,190,191,193,194,195,214,215,216,226,228,229,230,234,240,241,242,243,244,246,254,255,256,257,259,261,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,295,299,302,303,305,306,307,308,309,313,314,316,324,325,326,328,329,330,332,334,338,339,340,341,342,343,344,],[33,-87,-89,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-93,-85,57,-91,-188,71,33,-88,-90,-132,-108,-125,-86,-189,-184,71,71,-190,-175,-176,-177,-178,-179,-180,-192,-9,156,71,167,168,169,-82,-13,-69,-37,-67,-25,-39,-65,-15,-63,-10,-11,-12,-61,-59,-57,-54,-49,-46,-43,-93,-137,-84,-37,-9,-13,-140,-135,-94,-170,-92,-185,-191,-186,71,71,71,-193,71,255,-202,-203,-204,256,-21,-22,-26,-27,-28,-29,-136,-138,-139,-107,296,-114,-116,-123,-187,-181,71,-183,-83,-14,71,-201,-205,-70,-66,-17,-19,-20,-64,-62,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-106,-117,-124,-171,-182,71,-38,71,71,-16,-18,-30,-115,-118,-172,-194,-196,-197,71,-68,71,343,-199,71,-195,-198,-200,]),'LBRACE':([6,10,25,27,28,29,30,32,33,36,38,39,43,50,53,54,56,57,60,61,62,63,64,65,66,67,68,69,70,71,80,118,125,133,147,149,150,151,152,153,155,156,167,168,169,214,215,216,240,241,242,243,255,256,304,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[39,-133,-134,51,52,-109,-110,39,-85,39,-188,39,-132,134,143,39,147,-86,-189,-184,39,39,-190,-175,-176,-177,-178,-179,-180,-192,39,-137,-140,-135,147,-185,-191,-186,39,39,39,-193,-202,-203,-204,-136,-138,-139,-187,-181,39,-183,-201,-205,147,-182,39,39,39,-194,-196,-197,39,39,-199,39,-195,-198,-200,]),'LBRACKET':([7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,41,42,43,46,47,48,50,53,72,87,91,98,106,107,108,118,122,123,125,130,131,132,133,138,139,161,189,190,214,215,216,221,222,223,226,232,233,234,246,249,250,261,264,265,287,290,293,295,302,313,314,317,319,321,322,323,336,337,],[-87,-89,44,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-141,-134,-88,-90,44,-142,-143,-145,-108,-125,-9,-13,185,-15,-10,-11,-12,-137,-9,-13,-140,224,-144,-146,-135,-120,-122,224,-21,-22,-136,-138,-139,224,288,224,-107,-119,-121,-123,-14,224,224,-17,-19,-20,288,-166,-162,-106,-124,-16,-18,-164,-168,-161,-167,-163,-165,-169,]),'COMMA':([7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,32,34,35,41,42,43,46,47,48,50,53,72,75,86,87,88,89,90,91,95,97,98,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,122,123,125,126,127,128,129,130,131,132,133,140,141,142,145,146,148,159,170,189,190,191,193,194,195,214,215,216,219,220,221,222,226,228,229,230,234,237,238,239,244,245,246,251,252,257,258,259,260,261,262,263,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,287,290,293,295,299,300,301,302,303,307,313,314,316,317,319,321,322,323,324,325,326,327,331,333,334,335,336,337,],[-87,-89,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-141,-134,-93,58,-91,-88,-90,-132,-142,-143,-145,-108,-125,-9,157,-82,-13,-69,-37,-67,-25,-39,-65,-15,-63,-10,-11,-12,-61,-59,-57,-54,-49,-46,-43,-93,-137,-84,-37,-9,-13,-140,217,218,-154,-149,-153,-144,-146,-135,235,-126,-128,-94,-170,-92,157,157,-21,-22,-26,-27,-28,-29,-136,-138,-139,-151,-152,-158,-159,-107,297,-114,-116,-123,235,304,-173,-83,157,-14,157,157,-70,157,-66,157,-17,315,-23,-19,-20,-64,-62,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-155,-150,-160,-166,-162,-106,-117,-127,-129,-124,-171,-38,-16,-18,-30,-164,-168,-161,-167,-163,-115,-118,-172,-174,157,157,-68,-24,-165,-169,]),'RPAREN':([7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,41,42,43,45,46,47,48,49,50,53,71,86,87,88,89,90,91,95,97,98,105,106,107,108,109,110,111,112,113,114,115,118,120,122,123,124,125,126,127,128,129,130,131,132,133,138,139,156,159,160,161,186,189,190,191,193,194,195,214,215,216,219,220,221,222,223,226,232,233,234,244,245,246,248,249,250,251,252,257,259,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,289,290,291,292,293,295,302,307,311,313,314,316,317,319,320,321,322,323,331,333,334,335,336,337,],[-87,-89,-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-141,-134,-88,-90,-132,125,-142,-143,-145,133,-108,-125,-192,-82,-13,-69,-37,-67,-25,-39,-65,-15,-63,-10,-11,-12,-61,-59,-57,-54,-49,-46,-43,-137,-37,-9,-13,215,-140,216,-147,-154,-149,-153,-144,-146,-135,-120,-122,-193,246,247,-156,261,-21,-22,-26,-27,-28,-29,-136,-138,-139,-151,-152,-158,-159,290,-107,-119,-121,-123,-83,306,-14,-157,-158,290,308,309,-70,-66,-17,314,-23,-19,-20,316,-64,-62,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-155,-148,-150,-160,319,-166,321,322,-162,-106,-124,-38,332,-16,-18,-30,-164,-168,337,-161,-167,-163,339,341,-68,-24,-165,-169,]),'EQUALS':([10,25,32,43,72,87,89,91,98,106,107,108,116,118,120,122,123,125,133,142,189,190,191,193,194,195,214,215,216,246,261,264,265,307,313,314,316,],[-133,-134,56,-132,-9,-13,172,-25,-15,-10,-11,-12,56,-137,-37,-9,-13,-140,-135,236,-21,-22,-26,-27,-28,-29,-136,-138,-139,-14,-17,-19,-20,-38,-16,-18,-30,]),'COLON':([10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,43,50,53,72,74,86,88,89,90,91,95,97,98,105,106,107,108,109,110,111,112,113,114,115,118,119,120,122,123,125,133,137,138,139,154,189,190,191,193,194,195,214,215,216,226,230,232,233,234,244,246,257,258,259,261,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,295,297,302,307,313,314,316,334,],[-133,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-130,-131,-134,-132,-108,-125,153,155,-82,-69,-37,-67,-25,-39,-65,-15,-63,-10,-11,-12,-61,-59,-57,-54,-49,-46,-43,-137,-84,-37,-9,-13,-140,-135,231,-120,-122,242,-21,-22,-26,-27,-28,-29,-136,-138,-139,-107,298,-119,-121,-123,-83,-14,-70,312,-66,-17,-19,-20,-64,-62,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-106,231,-124,-38,-16,-18,-30,-68,]),'RBRACE':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,88,89,90,91,95,97,98,105,106,107,108,109,110,111,112,113,114,115,119,120,122,123,135,136,140,141,142,146,149,150,151,152,156,167,168,169,189,190,191,193,194,195,225,227,237,238,239,240,241,243,246,255,256,257,259,261,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,296,300,301,303,304,305,307,313,314,316,326,327,328,329,330,334,340,342,343,344,],[-85,-188,61,-86,-189,-184,149,151,-190,-175,-176,-177,-178,-179,-180,-192,-69,-37,-67,-25,-39,-65,-15,-63,-10,-11,-12,-61,-59,-57,-54,-49,-46,-43,-84,-37,-9,-13,226,-112,234,-126,-128,-170,-185,-191,-186,240,-193,-202,-203,-204,-21,-22,-26,-27,-28,-29,295,-113,302,303,-173,-187,-181,-183,-14,-201,-205,-70,-66,-17,-19,-20,-64,-62,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-111,-127,-129,-171,326,-182,-38,-16,-18,-30,-172,-174,-194,-196,-197,-68,-199,-195,-198,-200,]),'CASE':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,73,-86,-189,-184,73,73,-190,-175,-176,-177,-178,-179,-180,-192,73,-185,-191,-186,73,73,73,-193,-202,-203,-204,-187,-181,73,-183,-201,-205,-182,73,73,73,-194,-196,-197,73,73,-199,73,-195,-198,-200,]),'DEFAULT':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,74,-86,-189,-184,74,74,-190,-175,-176,-177,-178,-179,-180,-192,74,-185,-191,-186,74,74,74,-193,-202,-203,-204,-187,-181,74,-183,-201,-205,-182,74,74,74,-194,-196,-197,74,74,-199,74,-195,-198,-200,]),'IF':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,76,-86,-189,-184,76,76,-190,-175,-176,-177,-178,-179,-180,-192,76,-185,-191,-186,76,76,76,-193,-202,-203,-204,-187,-181,76,-183,-201,-205,-182,76,76,76,-194,-196,-197,76,76,-199,76,-195,-198,-200,]),'SWITCH':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,78,-86,-189,-184,78,78,-190,-175,-176,-177,-178,-179,-180,-192,78,-185,-191,-186,78,78,78,-193,-202,-203,-204,-187,-181,78,-183,-201,-205,-182,78,78,78,-194,-196,-197,78,78,-199,78,-195,-198,-200,]),'WHILE':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,164,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,79,-86,-189,-184,79,79,-190,-175,-176,-177,-178,-179,-180,-192,79,-185,-191,-186,79,79,79,-193,253,-202,-203,-204,-187,-181,79,-183,-201,-205,-182,79,79,79,-194,-196,-197,79,79,-199,79,-195,-198,-200,]),'DO':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,80,-86,-189,-184,80,80,-190,-175,-176,-177,-178,-179,-180,-192,80,-185,-191,-186,80,80,80,-193,-202,-203,-204,-187,-181,80,-183,-201,-205,-182,80,80,80,-194,-196,-197,80,80,-199,80,-195,-198,-200,]),'FOR':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,81,-86,-189,-184,81,81,-190,-175,-176,-177,-178,-179,-180,-192,81,-185,-191,-186,81,81,81,-193,-202,-203,-204,-187,-181,81,-183,-201,-205,-182,81,81,81,-194,-196,-197,81,81,-199,81,-195,-198,-200,]),'GOTO':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,82,-86,-189,-184,82,82,-190,-175,-176,-177,-178,-179,-180,-192,82,-185,-191,-186,82,82,82,-193,-202,-203,-204,-187,-181,82,-183,-201,-205,-182,82,82,82,-194,-196,-197,82,82,-199,82,-195,-198,-200,]),'CONTINUE':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,83,-86,-189,-184,83,83,-190,-175,-176,-177,-178,-179,-180,-192,83,-185,-191,-186,83,83,83,-193,-202,-203,-204,-187,-181,83,-183,-201,-205,-182,83,83,83,-194,-196,-197,83,83,-199,83,-195,-198,-200,]),'BREAK':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,84,-86,-189,-184,84,84,-190,-175,-176,-177,-178,-179,-180,-192,84,-185,-191,-186,84,84,84,-193,-202,-203,-204,-187,-181,84,-183,-201,-205,-182,84,84,84,-194,-196,-197,84,84,-199,84,-195,-198,-200,]),'RETURN':([33,38,39,57,60,61,62,63,64,65,66,67,68,69,70,71,80,149,150,151,152,153,155,156,167,168,169,240,241,242,243,255,256,305,306,308,309,328,329,330,332,338,340,341,342,343,344,],[-85,-188,85,-86,-189,-184,85,85,-190,-175,-176,-177,-178,-179,-180,-192,85,-185,-191,-186,85,85,85,-193,-202,-203,-204,-187,-181,85,-183,-201,-205,-182,85,85,85,-194,-196,-197,85,85,-199,85,-195,-198,-200,]),'INCREMENT':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,85,87,91,92,93,94,96,98,99,100,101,102,103,104,106,107,108,121,122,123,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,246,247,254,255,256,261,264,265,288,298,304,305,306,308,309,310,311,312,313,314,315,328,329,330,332,338,340,341,342,343,344,],[-85,-188,92,92,92,-86,-189,-184,92,92,-190,-175,-176,-177,-178,-179,-180,-192,-9,92,92,92,92,-13,189,92,92,92,92,-15,-31,-32,-33,-34,-35,-36,-10,-11,-12,92,-9,-13,92,-185,-191,-186,92,92,92,-193,92,92,92,92,92,-202,-203,-204,92,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,92,92,92,92,-21,-22,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-187,-181,92,-183,-14,92,92,-201,-205,-17,-19,-20,92,92,92,-182,92,92,92,92,92,92,-16,-18,92,-194,-196,-197,92,92,-199,92,-195,-198,-200,]),'DECREMENT':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,85,87,91,92,93,94,96,98,99,100,101,102,103,104,106,107,108,121,122,123,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,246,247,254,255,256,261,264,265,288,298,304,305,306,308,309,310,311,312,313,314,315,328,329,330,332,338,340,341,342,343,344,],[-85,-188,93,93,93,-86,-189,-184,93,93,-190,-175,-176,-177,-178,-179,-180,-192,-9,93,93,93,93,-13,190,93,93,93,93,-15,-31,-32,-33,-34,-35,-36,-10,-11,-12,93,-9,-13,93,-185,-191,-186,93,93,93,-193,93,93,93,93,93,-202,-203,-204,93,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,93,93,93,93,-21,-22,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-187,-181,93,-183,-14,93,93,-201,-205,-17,-19,-20,93,93,93,-182,93,93,93,93,93,93,-16,-18,93,-194,-196,-197,93,93,-199,93,-195,-198,-200,]),'SIZEOF':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,73,77,80,85,92,93,94,96,99,100,101,102,103,104,121,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,247,254,255,256,288,298,304,305,306,308,309,310,311,312,315,328,329,330,332,338,340,341,342,343,344,],[-85,-188,96,96,96,-86,-189,-184,96,96,-190,-175,-176,-177,-178,-179,-180,-192,96,96,96,96,96,96,96,96,-31,-32,-33,-34,-35,-36,96,96,-185,-191,-186,96,96,96,-193,96,96,96,96,96,-202,-203,-204,96,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-187,-181,96,-183,96,96,-201,-205,96,96,96,-182,96,96,96,96,96,96,96,-194,-196,-197,96,96,-199,96,-195,-198,-200,]),'MODULO':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,85,87,89,91,92,93,94,95,96,98,99,100,101,102,103,104,106,107,108,115,120,121,122,123,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,246,247,254,255,256,261,264,265,279,280,281,282,283,288,298,304,305,306,307,308,309,310,311,312,313,314,315,316,328,329,330,332,338,340,341,342,343,344,],[-85,-188,99,99,99,-86,-189,-184,99,99,-190,-175,-176,-177,-178,-179,-180,-192,-9,99,99,99,99,-13,-37,-25,99,99,99,-39,99,-15,-31,-32,-33,-34,-35,-36,-10,-11,-12,213,-37,99,-9,-13,99,-185,-191,-186,99,99,99,-193,99,99,99,99,99,-202,-203,-204,99,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,99,99,99,99,-21,-22,-26,99,-27,-28,-29,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-187,-181,99,-183,-14,99,99,-201,-205,-17,-19,-20,213,213,-40,-41,-42,99,99,99,-182,99,-38,99,99,99,99,99,-16,-18,99,-30,-194,-196,-197,99,99,-199,99,-195,-198,-200,]),'PLUS':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,85,87,89,91,92,93,94,95,96,98,99,100,101,102,103,104,106,107,108,114,115,120,121,122,123,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,246,247,254,255,256,261,264,265,277,278,279,280,281,282,283,288,298,304,305,306,307,308,309,310,311,312,313,314,315,316,328,329,330,332,338,340,341,342,343,344,],[-85,-188,101,101,101,-86,-189,-184,101,101,-190,-175,-176,-177,-178,-179,-180,-192,-9,101,101,101,101,-13,-37,-25,101,101,101,-39,101,-15,-31,-32,-33,-34,-35,-36,-10,-11,-12,209,-43,-37,101,-9,-13,101,-185,-191,-186,101,101,101,-193,101,101,101,101,101,-202,-203,-204,101,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,101,101,101,101,-21,-22,-26,101,-27,-28,-29,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-187,-181,101,-183,-14,101,101,-201,-205,-17,-19,-20,209,209,-44,-45,-40,-41,-42,101,101,101,-182,101,-38,101,101,101,101,101,-16,-18,101,-30,-194,-196,-197,101,101,-199,101,-195,-198,-200,]),'MINUS':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,85,87,89,91,92,93,94,95,96,98,99,100,101,102,103,104,106,107,108,114,115,120,121,122,123,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,246,247,254,255,256,261,264,265,277,278,279,280,281,282,283,288,298,304,305,306,307,308,309,310,311,312,313,314,315,316,328,329,330,332,338,340,341,342,343,344,],[-85,-188,102,102,102,-86,-189,-184,102,102,-190,-175,-176,-177,-178,-179,-180,-192,-9,102,102,102,102,-13,-37,-25,102,102,102,-39,102,-15,-31,-32,-33,-34,-35,-36,-10,-11,-12,210,-43,-37,102,-9,-13,102,-185,-191,-186,102,102,102,-193,102,102,102,102,102,-202,-203,-204,102,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,102,102,102,102,-21,-22,-26,102,-27,-28,-29,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-187,-181,102,-183,-14,102,102,-201,-205,-17,-19,-20,210,210,-44,-45,-40,-41,-42,102,102,102,-182,102,-38,102,102,102,102,102,-16,-18,102,-30,-194,-196,-197,102,102,-199,102,-195,-198,-200,]),'NOT':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,73,77,80,85,92,93,94,96,99,100,101,102,103,104,121,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,247,254,255,256,288,298,304,305,306,308,309,310,311,312,315,328,329,330,332,338,340,341,342,343,344,],[-85,-188,103,103,103,-86,-189,-184,103,103,-190,-175,-176,-177,-178,-179,-180,-192,103,103,103,103,103,103,103,103,-31,-32,-33,-34,-35,-36,103,103,-185,-191,-186,103,103,103,-193,103,103,103,103,103,-202,-203,-204,103,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-187,-181,103,-183,103,103,-201,-205,103,103,103,-182,103,103,103,103,103,103,103,-194,-196,-197,103,103,-199,103,-195,-198,-200,]),'LNOT':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,73,77,80,85,92,93,94,96,99,100,101,102,103,104,121,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,247,254,255,256,288,298,304,305,306,308,309,310,311,312,315,328,329,330,332,338,340,341,342,343,344,],[-85,-188,104,104,104,-86,-189,-184,104,104,-190,-175,-176,-177,-178,-179,-180,-192,104,104,104,104,104,104,104,104,-31,-32,-33,-34,-35,-36,104,104,-185,-191,-186,104,104,104,-193,104,104,104,104,104,-202,-203,-204,104,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-187,-181,104,-183,104,104,-201,-205,104,104,104,-182,104,104,104,104,104,104,104,-194,-196,-197,104,104,-199,104,-195,-198,-200,]),'STRING':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,73,77,80,85,92,93,94,96,99,100,101,102,103,104,121,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,247,254,255,256,288,298,304,305,306,308,309,310,311,312,315,328,329,330,332,338,340,341,342,343,344,],[-85,-188,106,106,106,-86,-189,-184,106,106,-190,-175,-176,-177,-178,-179,-180,-192,106,106,106,106,106,106,106,106,-31,-32,-33,-34,-35,-36,106,106,-185,-191,-186,106,106,106,-193,106,106,106,106,106,-202,-203,-204,106,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-187,-181,106,-183,106,106,-201,-205,106,106,106,-182,106,106,106,106,106,106,106,-194,-196,-197,106,106,-199,106,-195,-198,-200,]),'INTEGER':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,73,77,80,85,92,93,94,96,99,100,101,102,103,104,121,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,247,254,255,256,288,298,304,305,306,308,309,310,311,312,315,328,329,330,332,338,340,341,342,343,344,],[-85,-188,107,107,107,-86,-189,-184,107,107,-190,-175,-176,-177,-178,-179,-180,-192,107,107,107,107,107,107,107,107,-31,-32,-33,-34,-35,-36,107,107,-185,-191,-186,107,107,107,-193,107,107,107,107,107,-202,-203,-204,107,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-187,-181,107,-183,107,107,-201,-205,107,107,107,-182,107,107,107,107,107,107,107,-194,-196,-197,107,107,-199,107,-195,-198,-200,]),'CHARACTER':([33,38,39,44,56,57,60,61,62,63,64,65,66,67,68,69,70,71,73,77,80,85,92,93,94,96,99,100,101,102,103,104,121,147,149,150,151,152,153,155,156,157,158,162,163,165,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,240,241,242,243,247,254,255,256,288,298,304,305,306,308,309,310,311,312,315,328,329,330,332,338,340,341,342,343,344,],[-85,-188,108,108,108,-86,-189,-184,108,108,-190,-175,-176,-177,-178,-179,-180,-192,108,108,108,108,108,108,108,108,-31,-32,-33,-34,-35,-36,108,108,-185,-191,-186,108,108,108,-193,108,108,108,108,108,-202,-203,-204,108,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-187,-181,108,-183,108,108,-201,-205,108,108,108,-182,108,108,108,108,108,108,108,-194,-196,-197,108,108,-199,108,-195,-198,-200,]),'RBRACKET':([44,86,88,89,90,91,95,97,98,105,106,107,108,109,110,111,112,113,114,115,117,119,120,122,123,189,190,191,193,194,195,224,244,246,257,259,260,261,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,288,294,307,313,314,316,318,334,],[118,-82,-69,-37,-67,-25,-39,-65,-15,-63,-10,-11,-12,-61,-59,-57,-54,-49,-46,-43,214,-84,-37,-9,-13,-21,-22,-26,-27,-28,-29,293,-83,-14,-70,-66,313,-17,-19,-20,-64,-62,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,317,323,-38,-16,-18,-30,336,-68,]),'ELSE':([61,65,66,67,68,69,70,71,149,151,156,167,168,169,240,241,243,255,256,305,328,329,330,340,342,343,344,],[-184,-175,-176,-177,-178,-179,-180,-192,-185,-186,-193,-202,-203,-204,-187,-181,-183,-201,-205,-182,338,-196,-197,-199,-195,-198,-200,]),'PERIOD':([72,87,91,98,106,107,108,122,123,189,190,246,261,264,265,313,314,],[-9,-13,187,-15,-10,-11,-12,-9,-13,-21,-22,-14,-17,-19,-20,-16,-18,]),'ARROW':([72,87,91,98,106,107,108,122,123,189,190,246,261,264,265,313,314,],[-9,-13,188,-15,-10,-11,-12,-9,-13,-21,-22,-14,-17,-19,-20,-16,-18,]),'TIMESEQUAL':([72,87,89,91,98,106,107,108,120,122,123,189,190,191,193,194,195,246,261,264,265,307,313,314,316,],[-9,-13,173,-25,-15,-10,-11,-12,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,-38,-16,-18,-30,]),'DIVEQUAL':([72,87,89,91,98,106,107,108,120,122,123,189,190,191,193,194,195,246,261,264,265,307,313,314,316,],[-9,-13,174,-25,-15,-10,-11,-12,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,-38,-16,-18,-30,]),'MODEQUAL':([72,87,89,91,98,106,107,108,120,122,123,189,190,191,193,194,195,246,261,264,265,307,313,314,316,],[-9,-13,175,-25,-15,-10,-11,-12,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,-38,-16,-18,-30,]),'PLUSEQUAL':([72,87,89,91,98,106,107,108,120,122,123,189,190,191,193,194,195,246,261,264,265,307,313,314,316,],[-9,-13,176,-25,-15,-10,-11,-12,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,-38,-16,-18,-30,]),'MINUSEQUAL':([72,87,89,91,98,106,107,108,120,122,123,189,190,191,193,194,195,246,261,264,265,307,313,314,316,],[-9,-13,177,-25,-15,-10,-11,-12,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,-38,-16,-18,-30,]),'LSHIFTEQUAL':([72,87,89,91,98,106,107,108,120,122,123,189,190,191,193,194,195,246,261,264,265,307,313,314,316,],[-9,-13,178,-25,-15,-10,-11,-12,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,-38,-16,-18,-30,]),'RSHIFTEQUAL':([72,87,89,91,98,106,107,108,120,122,123,189,190,191,193,194,195,246,261,264,265,307,313,314,316,],[-9,-13,179,-25,-15,-10,-11,-12,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,-38,-16,-18,-30,]),'ANDEQUAL':([72,87,89,91,98,106,107,108,120,122,123,189,190,191,193,194,195,246,261,264,265,307,313,314,316,],[-9,-13,180,-25,-15,-10,-11,-12,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,-38,-16,-18,-30,]),'XOREQUAL':([72,87,89,91,98,106,107,108,120,122,123,189,190,191,193,194,195,246,261,264,265,307,313,314,316,],[-9,-13,181,-25,-15,-10,-11,-12,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,-38,-16,-18,-30,]),'OREQUAL':([72,87,89,91,98,106,107,108,120,122,123,189,190,191,193,194,195,246,261,264,265,307,313,314,316,],[-9,-13,182,-25,-15,-10,-11,-12,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,-38,-16,-18,-30,]),'DIVIDE':([72,87,89,91,95,98,106,107,108,115,120,122,123,189,190,191,193,194,195,246,261,264,265,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,212,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,212,212,-40,-41,-42,-38,-16,-18,-30,]),'LSHIFT':([72,87,89,91,95,98,106,107,108,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,207,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,207,207,207,207,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'RSHIFT':([72,87,89,91,95,98,106,107,108,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,208,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,208,208,208,208,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'LT':([72,87,89,91,95,98,106,107,108,112,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,203,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,203,203,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'GT':([72,87,89,91,95,98,106,107,108,112,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,204,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,204,204,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'LE':([72,87,89,91,95,98,106,107,108,112,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,205,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,205,205,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'GE':([72,87,89,91,95,98,106,107,108,112,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,206,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,206,206,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'EQ':([72,87,89,91,95,98,106,107,108,111,112,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,270,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,201,-54,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,201,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'NE':([72,87,89,91,95,98,106,107,108,111,112,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,270,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,202,-54,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,202,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'AND':([72,87,89,91,95,98,106,107,108,110,111,112,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,200,-57,-54,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,200,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'XOR':([72,87,89,91,95,98,106,107,108,109,110,111,112,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,-10,-11,-12,199,-59,-57,-54,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,199,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'OR':([72,87,89,91,95,98,105,106,107,108,109,110,111,112,113,114,115,120,122,123,189,190,191,193,194,195,246,261,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,-15,198,-10,-11,-12,-61,-59,-57,-54,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-17,-19,-20,198,-62,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'LAND':([72,87,89,91,95,97,98,105,106,107,108,109,110,111,112,113,114,115,120,122,123,189,190,191,193,194,195,246,259,261,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,-25,-39,197,-15,-63,-10,-11,-12,-61,-59,-57,-54,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,197,-17,-19,-20,-64,-62,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'TERNARY':([72,87,89,90,91,95,97,98,105,106,107,108,109,110,111,112,113,114,115,120,122,123,189,190,191,193,194,195,246,259,261,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,183,-25,-39,-65,-15,-63,-10,-11,-12,-61,-59,-57,-54,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-66,-17,-19,-20,-64,-62,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'LOR':([72,87,89,90,91,95,97,98,105,106,107,108,109,110,111,112,113,114,115,120,122,123,189,190,191,193,194,195,246,259,261,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,307,313,314,316,],[-9,-13,-37,184,-25,-39,-65,-15,-63,-10,-11,-12,-61,-59,-57,-54,-49,-46,-43,-37,-9,-13,-21,-22,-26,-27,-28,-29,-14,-66,-17,-19,-20,-64,-62,-60,-58,-55,-56,-50,-51,-52,-53,-47,-48,-44,-45,-40,-41,-42,-38,-16,-18,-30,]),'ELLIPSIS':([218,],[285,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,31,]),'function_definition':([0,1,],[3,3,]),'declaration':([0,1,6,32,36,39,54,63,],[4,4,38,38,60,38,60,60,]),'declaration_specifiers':([0,1,6,7,8,32,36,39,45,54,63,218,223,250,289,],[5,5,40,41,42,40,40,40,130,40,40,130,130,130,130,]),'declarator':([0,1,5,26,40,58,130,137,223,297,],[6,6,32,49,116,116,219,230,49,230,]),'type_specifier':([0,1,6,7,8,32,36,39,45,51,54,63,77,121,134,135,138,139,196,218,223,225,250,289,],[7,7,7,7,7,7,7,7,7,138,7,7,138,138,138,138,138,138,138,7,7,138,7,7,]),'type_qualifier':([0,1,6,7,8,24,32,36,39,45,46,51,54,63,77,121,134,135,138,139,196,218,223,225,250,289,],[8,8,8,8,8,48,8,8,8,8,132,139,8,8,139,139,139,139,139,139,139,8,8,139,8,8,]),'pointer':([0,1,5,24,26,40,46,58,130,137,161,223,250,297,],[9,9,9,47,9,9,131,9,221,9,249,221,249,9,]),'direct_declarator':([0,1,5,9,26,40,58,130,137,221,223,297,],[10,10,10,43,10,10,10,10,10,43,10,10,]),'struct_or_union_specifier':([0,1,6,7,8,32,36,39,45,51,54,63,77,121,134,135,138,139,196,218,223,225,250,289,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'enum_specifier':([0,1,6,7,8,32,36,39,45,51,54,63,77,121,134,135,138,139,196,218,223,225,250,289,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'struct_or_union':([0,1,6,7,8,32,36,39,45,51,54,63,77,121,134,135,138,139,196,218,223,225,250,289,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'init_declarator_list':([5,40,],[34,34,]),'init_declarator':([5,40,58,],[35,35,148,]),'declaration_list':([6,32,39,],[36,54,63,]),'compound_statement':([6,32,36,39,54,62,63,80,152,153,155,242,306,308,309,332,338,341,],[37,55,59,66,144,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'type_qualifier_list':([24,],[46,]),'statement_list':([39,63,],[62,152,]),'statement':([39,62,63,80,152,153,155,242,306,308,309,332,338,341,],[64,150,64,164,150,241,243,305,328,329,330,340,342,344,]),'labeled_statement':([39,62,63,80,152,153,155,242,306,308,309,332,338,341,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'expression_statement':([39,62,63,80,152,153,155,165,242,254,306,308,309,332,338,341,],[67,67,67,67,67,67,67,254,67,311,67,67,67,67,67,67,]),'selection_statement':([39,62,63,80,152,153,155,242,306,308,309,332,338,341,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'iteration_statement':([39,62,63,80,152,153,155,242,306,308,309,332,338,341,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'jump_statement':([39,62,63,80,152,153,155,242,306,308,309,332,338,341,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'expression':([39,62,63,77,80,85,121,152,153,155,158,162,163,165,183,185,192,196,242,254,306,308,309,310,311,332,338,341,],[75,75,75,159,75,170,159,75,75,75,245,251,252,75,258,260,159,159,75,75,75,75,75,331,333,75,75,75,]),'assignment_expression':([39,56,62,63,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,185,186,192,196,242,254,304,306,308,309,310,311,315,332,338,341,],[86,146,86,86,86,86,86,86,146,86,86,86,244,86,86,86,86,257,86,86,263,86,86,86,86,146,86,86,86,86,86,335,86,86,86,]),'conditional_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,185,186,192,196,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[88,119,88,88,88,119,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,119,119,119,88,88,119,119,88,88,88,88,88,88,334,88,88,88,88,]),'unary_expression':([39,44,56,62,63,73,77,80,85,92,93,94,96,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,242,247,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[89,120,89,89,89,120,89,89,89,191,193,120,195,89,89,89,89,89,89,89,89,89,89,89,89,120,89,89,89,89,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,89,120,89,120,120,89,89,89,89,89,89,120,89,89,89,89,]),'logical_or_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,185,186,192,196,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'postfix_expression':([39,44,56,62,63,73,77,80,85,92,93,94,96,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,242,247,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'unary_operator':([39,44,56,62,63,73,77,80,85,92,93,94,96,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,242,247,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'cast_expression':([39,44,56,62,63,73,77,80,85,94,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,242,247,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[95,95,95,95,95,95,95,95,95,194,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,281,282,283,95,95,95,95,307,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'logical_and_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,259,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'primary_expression':([39,44,56,62,63,73,77,80,85,92,93,94,96,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,224,231,236,242,247,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'inclusive_or_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,267,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'exclusive_or_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,268,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'and_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,269,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'equality_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,200,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,270,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'relational_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,200,201,202,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,271,272,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'shift_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,273,274,275,276,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'additive_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,277,278,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'multiplicative_expression':([39,44,56,62,63,73,77,80,85,121,147,152,153,155,157,158,162,163,165,171,183,184,185,186,192,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,224,231,236,242,254,288,298,304,306,308,309,310,311,312,315,332,338,341,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,279,280,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'constant_expression':([44,73,224,231,236,288,298,],[117,154,294,299,301,318,325,]),'parameter_type_list':([45,223,250,289,],[124,292,292,320,]),'identifier_list':([45,],[126,]),'parameter_list':([45,223,250,289,],[127,127,127,127,]),'parameter_declaration':([45,218,223,250,289,],[129,286,129,129,129,]),'struct_declaration_list':([51,134,],[135,225,]),'struct_declaration':([51,134,135,225,],[136,136,227,227,]),'specifier_qualifier_list':([51,77,121,134,135,138,139,196,225,],[137,161,161,137,137,232,233,161,137,]),'enumerator_list':([52,143,],[140,237,]),'enumerator':([52,143,235,],[141,141,300,]),'initializer':([56,147,304,],[145,239,327,]),'type_name':([77,121,196,],[160,160,266,]),'assignment_operator':([89,],[171,]),'abstract_declarator':([130,161,223,250,],[220,248,291,291,]),'direct_abstract_declarator':([130,161,221,223,249,250,],[222,222,287,222,287,222,]),'struct_declarator_list':([137,],[228,]),'struct_declarator':([137,297,],[229,324,]),'initializer_list':([147,],[238,]),'argument_expression_list':([186,],[262,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','myParser.py',8),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','myParser.py',9),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','myParser.py',17),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','myParser.py',18),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition','myParser.py',23),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','myParser.py',24),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition','myParser.py',25),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition','myParser.py',26),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','myParser.py',34),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','myParser.py',35),
  ('primary_expression -> INTEGER','primary_expression',1,'p_primary_expression','myParser.py',36),
  ('primary_expression -> CHARACTER','primary_expression',1,'p_primary_expression','myParser.py',37),
  ('primary_expression -> FLOAT','primary_expression',1,'p_primary_expression','myParser.py',38),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','myParser.py',39),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','myParser.py',44),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression','myParser.py',45),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression','myParser.py',46),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN','postfix_expression',4,'p_postfix_expression','myParser.py',47),
  ('postfix_expression -> postfix_expression PERIOD IDENTIFIER','postfix_expression',3,'p_postfix_expression','myParser.py',48),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','myParser.py',49),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','myParser.py',50),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','myParser.py',51),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','myParser.py',59),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','myParser.py',60),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','myParser.py',69),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','myParser.py',70),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','myParser.py',71),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','myParser.py',72),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','myParser.py',73),
  ('unary_expression -> SIZEOF LPAREN type_name RPAREN','unary_expression',4,'p_unary_expression','myParser.py',74),
  ('unary_operator -> MODULO','unary_operator',1,'p_unary_operator','myParser.py',79),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','myParser.py',80),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','myParser.py',81),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','myParser.py',82),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','myParser.py',83),
  ('unary_operator -> LNOT','unary_operator',1,'p_unary_operator','myParser.py',84),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','myParser.py',89),
  ('cast_expression -> LPAREN type_name RPAREN cast_expression','cast_expression',4,'p_cast_expression','myParser.py',90),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','myParser.py',96),
  ('multiplicative_expression -> multiplicative_expression TIMES cast_expression','multiplicative_expression',3,'p_multiplicative_expression','myParser.py',97),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','myParser.py',98),
  ('multiplicative_expression -> multiplicative_expression MODULO cast_expression','multiplicative_expression',3,'p_multiplicative_expression','myParser.py',99),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','myParser.py',107),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','myParser.py',108),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','myParser.py',109),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','myParser.py',117),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression','myParser.py',118),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression','myParser.py',119),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','myParser.py',127),
  ('relational_expression -> relational_expression LT shift_expression','relational_expression',3,'p_relational_expression','myParser.py',128),
  ('relational_expression -> relational_expression GT shift_expression','relational_expression',3,'p_relational_expression','myParser.py',129),
  ('relational_expression -> relational_expression LE shift_expression','relational_expression',3,'p_relational_expression','myParser.py',130),
  ('relational_expression -> relational_expression GE shift_expression','relational_expression',3,'p_relational_expression','myParser.py',131),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','myParser.py',139),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','myParser.py',140),
  ('equality_expression -> equality_expression NE relational_expression','equality_expression',3,'p_equality_expression','myParser.py',141),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','myParser.py',149),
  ('and_expression -> and_expression AND equality_expression','and_expression',3,'p_and_expression','myParser.py',150),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','myParser.py',158),
  ('exclusive_or_expression -> exclusive_or_expression XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','myParser.py',159),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','myParser.py',167),
  ('inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','myParser.py',168),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','myParser.py',176),
  ('logical_and_expression -> logical_and_expression LAND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','myParser.py',177),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','myParser.py',185),
  ('logical_or_expression -> logical_or_expression LOR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','myParser.py',186),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','myParser.py',194),
  ('conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','myParser.py',195),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','myParser.py',200),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','myParser.py',201),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','myParser.py',209),
  ('assignment_operator -> TIMESEQUAL','assignment_operator',1,'p_assignment_operator','myParser.py',210),
  ('assignment_operator -> DIVEQUAL','assignment_operator',1,'p_assignment_operator','myParser.py',211),
  ('assignment_operator -> MODEQUAL','assignment_operator',1,'p_assignment_operator','myParser.py',212),
  ('assignment_operator -> PLUSEQUAL','assignment_operator',1,'p_assignment_operator','myParser.py',213),
  ('assignment_operator -> MINUSEQUAL','assignment_operator',1,'p_assignment_operator','myParser.py',214),
  ('assignment_operator -> LSHIFTEQUAL','assignment_operator',1,'p_assignment_operator','myParser.py',215),
  ('assignment_operator -> RSHIFTEQUAL','assignment_operator',1,'p_assignment_operator','myParser.py',216),
  ('assignment_operator -> ANDEQUAL','assignment_operator',1,'p_assignment_operator','myParser.py',217),
  ('assignment_operator -> XOREQUAL','assignment_operator',1,'p_assignment_operator','myParser.py',218),
  ('assignment_operator -> OREQUAL','assignment_operator',1,'p_assignment_operator','myParser.py',219),
  ('expression -> assignment_expression','expression',1,'p_expression','myParser.py',224),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','myParser.py',225),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','myParser.py',230),
  ('declaration -> declaration_specifiers SEMI','declaration',2,'p_declaration','myParser.py',235),
  ('declaration -> declaration_specifiers init_declarator_list SEMI','declaration',3,'p_declaration','myParser.py',236),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','myParser.py',241),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','myParser.py',242),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','myParser.py',243),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','myParser.py',244),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','myParser.py',249),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','myParser.py',250),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','myParser.py',259),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','myParser.py',260),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','myParser.py',265),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','myParser.py',266),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','myParser.py',267),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','myParser.py',268),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','myParser.py',269),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','myParser.py',270),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','myParser.py',271),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','myParser.py',272),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','myParser.py',273),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','myParser.py',274),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','myParser.py',275),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE','struct_or_union_specifier',5,'p_struct_or_union_specifier','myParser.py',283),
  ('struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE','struct_or_union_specifier',4,'p_struct_or_union_specifier','myParser.py',284),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','myParser.py',285),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','myParser.py',290),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','myParser.py',291),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI','struct_declaration',3,'p_struct_declaration','myParser.py',296),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','myParser.py',301),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','myParser.py',302),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','myParser.py',307),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','myParser.py',308),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','myParser.py',313),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','myParser.py',314),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','myParser.py',315),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','myParser.py',320),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','myParser.py',321),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','myParser.py',322),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','myParser.py',323),
  ('enum_specifier -> ENUM LBRACE enumerator_list RBRACE','enum_specifier',4,'p_enum_specifier','myParser.py',328),
  ('enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE','enum_specifier',5,'p_enum_specifier','myParser.py',329),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','myParser.py',330),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','myParser.py',335),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','myParser.py',336),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','myParser.py',341),
  ('enumerator -> IDENTIFIER EQUALS constant_expression','enumerator',3,'p_enumerator','myParser.py',342),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','myParser.py',347),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','myParser.py',348),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','myParser.py',353),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','myParser.py',354),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','myParser.py',359),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator','myParser.py',360),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET','direct_declarator',4,'p_direct_declarator','myParser.py',361),
  ('direct_declarator -> direct_declarator LBRACKET RBRACKET','direct_declarator',3,'p_direct_declarator','myParser.py',362),
  ('direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN','direct_declarator',4,'p_direct_declarator','myParser.py',363),
  ('direct_declarator -> direct_declarator LPAREN identifier_list RPAREN','direct_declarator',4,'p_direct_declarator','myParser.py',364),
  ('direct_declarator -> direct_declarator LPAREN RPAREN','direct_declarator',3,'p_direct_declarator','myParser.py',365),
  ('pointer -> TIMES','pointer',1,'p_pointer','myParser.py',376),
  ('pointer -> TIMES type_qualifier_list','pointer',2,'p_pointer','myParser.py',377),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','myParser.py',378),
  ('pointer -> TIMES type_qualifier_list pointer','pointer',3,'p_pointer','myParser.py',379),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','myParser.py',384),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','myParser.py',385),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','myParser.py',390),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','myParser.py',391),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','myParser.py',396),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','myParser.py',397),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','myParser.py',406),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','myParser.py',407),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','myParser.py',408),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','myParser.py',413),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','myParser.py',414),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','myParser.py',419),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','myParser.py',420),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','myParser.py',425),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','myParser.py',426),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','myParser.py',427),
  ('direct_abstract_declarator -> LPAREN abstract_declarator RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','myParser.py',432),
  ('direct_abstract_declarator -> LBRACKET RBRACKET','direct_abstract_declarator',2,'p_direct_abstract_declarator','myParser.py',433),
  ('direct_abstract_declarator -> LBRACKET constant_expression RBRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator','myParser.py',434),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator','myParser.py',435),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET','direct_abstract_declarator',4,'p_direct_abstract_declarator','myParser.py',436),
  ('direct_abstract_declarator -> LPAREN RPAREN','direct_abstract_declarator',2,'p_direct_abstract_declarator','myParser.py',437),
  ('direct_abstract_declarator -> LPAREN parameter_type_list RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','myParser.py',438),
  ('direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','myParser.py',439),
  ('direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator','myParser.py',440),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','myParser.py',445),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer','myParser.py',446),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','myParser.py',447),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','myParser.py',452),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','myParser.py',453),
  ('statement -> labeled_statement','statement',1,'p_statement','myParser.py',462),
  ('statement -> compound_statement','statement',1,'p_statement','myParser.py',463),
  ('statement -> expression_statement','statement',1,'p_statement','myParser.py',464),
  ('statement -> selection_statement','statement',1,'p_statement','myParser.py',465),
  ('statement -> iteration_statement','statement',1,'p_statement','myParser.py',466),
  ('statement -> jump_statement','statement',1,'p_statement','myParser.py',467),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','myParser.py',472),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','myParser.py',473),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','myParser.py',474),
  ('compound_statement -> LBRACE RBRACE','compound_statement',2,'p_compound_statement','myParser.py',479),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','myParser.py',480),
  ('compound_statement -> LBRACE declaration_list RBRACE','compound_statement',3,'p_compound_statement','myParser.py',481),
  ('compound_statement -> LBRACE declaration_list statement_list RBRACE','compound_statement',4,'p_compound_statement','myParser.py',482),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','myParser.py',492),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','myParser.py',493),
  ('statement_list -> statement','statement_list',1,'p_statement_list','myParser.py',502),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','myParser.py',503),
  ('expression_statement -> SEMI','expression_statement',1,'p_expression_statement','myParser.py',512),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','myParser.py',513),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','myParser.py',518),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','myParser.py',519),
  ('selection_statement -> SWITCH LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','myParser.py',520),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','myParser.py',529),
  ('iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI','iteration_statement',7,'p_iteration_statement','myParser.py',530),
  ('iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement','iteration_statement',6,'p_iteration_statement','myParser.py',531),
  ('iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement','iteration_statement',7,'p_iteration_statement','myParser.py',532),
  ('jump_statement -> GOTO IDENTIFIER SEMI','jump_statement',3,'p_jump_statement','myParser.py',547),
  ('jump_statement -> CONTINUE SEMI','jump_statement',2,'p_jump_statement','myParser.py',548),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','myParser.py',549),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement','myParser.py',550),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement','myParser.py',551),
]
