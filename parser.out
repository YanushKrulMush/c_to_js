Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 6     function_definition -> declaration_specifiers declarator compound_statement
Rule 7     function_definition -> declarator declaration_list compound_statement
Rule 8     function_definition -> declarator compound_statement
Rule 9     primary_expression -> IDENTIFIER
Rule 10    primary_expression -> STRING
Rule 11    primary_expression -> INTEGER
Rule 12    primary_expression -> CHARACTER
Rule 13    primary_expression -> FLOAT
Rule 14    primary_expression -> LPAREN expression RPAREN
Rule 15    postfix_expression -> primary_expression
Rule 16    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 17    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 18    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 19    postfix_expression -> postfix_expression PERIOD IDENTIFIER
Rule 20    postfix_expression -> postfix_expression ARROW IDENTIFIER
Rule 21    postfix_expression -> postfix_expression INCREMENT
Rule 22    postfix_expression -> postfix_expression DECREMENT
Rule 23    argument_expression_list -> assignment_expression
Rule 24    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 25    unary_expression -> postfix_expression
Rule 26    unary_expression -> INCREMENT unary_expression
Rule 27    unary_expression -> DECREMENT unary_expression
Rule 28    unary_expression -> unary_operator cast_expression
Rule 29    unary_expression -> SIZEOF unary_expression
Rule 30    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 31    unary_operator -> MODULO
Rule 32    unary_operator -> TIMES
Rule 33    unary_operator -> PLUS
Rule 34    unary_operator -> MINUS
Rule 35    unary_operator -> NOT
Rule 36    unary_operator -> LNOT
Rule 37    cast_expression -> unary_expression
Rule 38    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 39    multiplicative_expression -> cast_expression
Rule 40    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 41    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 42    multiplicative_expression -> multiplicative_expression MODULO cast_expression
Rule 43    additive_expression -> multiplicative_expression
Rule 44    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 45    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 46    shift_expression -> additive_expression
Rule 47    shift_expression -> shift_expression LSHIFT additive_expression
Rule 48    shift_expression -> shift_expression RSHIFT additive_expression
Rule 49    relational_expression -> shift_expression
Rule 50    relational_expression -> relational_expression LT shift_expression
Rule 51    relational_expression -> relational_expression GT shift_expression
Rule 52    relational_expression -> relational_expression LE shift_expression
Rule 53    relational_expression -> relational_expression GE shift_expression
Rule 54    equality_expression -> relational_expression
Rule 55    equality_expression -> equality_expression EQ relational_expression
Rule 56    equality_expression -> equality_expression NE relational_expression
Rule 57    and_expression -> equality_expression
Rule 58    and_expression -> and_expression AND equality_expression
Rule 59    exclusive_or_expression -> and_expression
Rule 60    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 61    inclusive_or_expression -> exclusive_or_expression
Rule 62    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 63    logical_and_expression -> inclusive_or_expression
Rule 64    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 65    logical_or_expression -> logical_and_expression
Rule 66    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 67    conditional_expression -> logical_or_expression
Rule 68    conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression
Rule 69    assignment_expression -> conditional_expression
Rule 70    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 71    assignment_operator -> EQUALS
Rule 72    assignment_operator -> TIMESEQUAL
Rule 73    assignment_operator -> DIVEQUAL
Rule 74    assignment_operator -> MODEQUAL
Rule 75    assignment_operator -> PLUSEQUAL
Rule 76    assignment_operator -> MINUSEQUAL
Rule 77    assignment_operator -> LSHIFTEQUAL
Rule 78    assignment_operator -> RSHIFTEQUAL
Rule 79    assignment_operator -> ANDEQUAL
Rule 80    assignment_operator -> XOREQUAL
Rule 81    assignment_operator -> OREQUAL
Rule 82    expression -> assignment_expression
Rule 83    expression -> expression COMMA assignment_expression
Rule 84    constant_expression -> conditional_expression
Rule 85    declaration -> declaration_specifiers SEMI
Rule 86    declaration -> declaration_specifiers init_declarator_list SEMI
Rule 87    declaration_specifiers -> type_specifier
Rule 88    declaration_specifiers -> type_specifier declaration_specifiers
Rule 89    declaration_specifiers -> type_qualifier
Rule 90    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 91    init_declarator_list -> init_declarator
Rule 92    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 93    init_declarator -> declarator
Rule 94    init_declarator -> declarator EQUALS initializer
Rule 95    type_specifier -> VOID
Rule 96    type_specifier -> CHAR
Rule 97    type_specifier -> SHORT
Rule 98    type_specifier -> INT
Rule 99    type_specifier -> LONG
Rule 100   type_specifier -> FLOAT
Rule 101   type_specifier -> DOUBLE
Rule 102   type_specifier -> SIGNED
Rule 103   type_specifier -> UNSIGNED
Rule 104   type_specifier -> struct_or_union_specifier
Rule 105   type_specifier -> enum_specifier
Rule 106   struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
Rule 107   struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE
Rule 108   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 109   struct_or_union -> STRUCT
Rule 110   struct_or_union -> UNION
Rule 111   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI
Rule 112   struct_declaration_list -> struct_declaration
Rule 113   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 114   struct_declarator_list -> struct_declarator
Rule 115   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 116   struct_declarator -> declarator
Rule 117   struct_declarator -> COLON constant_expression
Rule 118   struct_declarator -> declarator COLON constant_expression
Rule 119   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 120   specifier_qualifier_list -> type_specifier
Rule 121   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 122   specifier_qualifier_list -> type_qualifier
Rule 123   enum_specifier -> ENUM LBRACE enumerator_list RBRACE
Rule 124   enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE
Rule 125   enum_specifier -> ENUM IDENTIFIER
Rule 126   enumerator_list -> enumerator
Rule 127   enumerator_list -> enumerator_list COMMA enumerator
Rule 128   enumerator -> IDENTIFIER
Rule 129   enumerator -> IDENTIFIER EQUALS constant_expression
Rule 130   type_qualifier -> CONST
Rule 131   type_qualifier -> VOLATILE
Rule 132   declarator -> pointer direct_declarator
Rule 133   declarator -> direct_declarator
Rule 134   direct_declarator -> IDENTIFIER
Rule 135   direct_declarator -> LPAREN declarator RPAREN
Rule 136   direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET
Rule 137   direct_declarator -> direct_declarator LBRACKET RBRACKET
Rule 138   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 139   direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 140   direct_declarator -> direct_declarator LPAREN RPAREN
Rule 141   pointer -> TIMES
Rule 142   pointer -> TIMES type_qualifier_list
Rule 143   pointer -> TIMES pointer
Rule 144   pointer -> TIMES type_qualifier_list pointer
Rule 145   type_qualifier_list -> type_qualifier
Rule 146   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 147   parameter_type_list -> parameter_list
Rule 148   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 149   parameter_list -> parameter_declaration
Rule 150   parameter_list -> parameter_list COMMA parameter_declaration
Rule 151   parameter_declaration -> declaration_specifiers declarator
Rule 152   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 153   parameter_declaration -> declaration_specifiers
Rule 154   identifier_list -> IDENTIFIER
Rule 155   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 156   type_name -> specifier_qualifier_list
Rule 157   type_name -> specifier_qualifier_list abstract_declarator
Rule 158   abstract_declarator -> pointer
Rule 159   abstract_declarator -> direct_abstract_declarator
Rule 160   abstract_declarator -> pointer direct_abstract_declarator
Rule 161   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 162   direct_abstract_declarator -> LBRACKET RBRACKET
Rule 163   direct_abstract_declarator -> LBRACKET constant_expression RBRACKET
Rule 164   direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET
Rule 165   direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET
Rule 166   direct_abstract_declarator -> LPAREN RPAREN
Rule 167   direct_abstract_declarator -> LPAREN parameter_type_list RPAREN
Rule 168   direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN
Rule 169   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN
Rule 170   initializer -> assignment_expression
Rule 171   initializer -> LBRACE initializer_list RBRACE
Rule 172   initializer -> LBRACE initializer_list COMMA RBRACE
Rule 173   initializer_list -> initializer
Rule 174   initializer_list -> initializer_list COMMA initializer
Rule 175   statement -> labeled_statement
Rule 176   statement -> compound_statement
Rule 177   statement -> expression_statement
Rule 178   statement -> selection_statement
Rule 179   statement -> iteration_statement
Rule 180   statement -> jump_statement
Rule 181   labeled_statement -> IDENTIFIER COLON statement
Rule 182   labeled_statement -> CASE constant_expression COLON statement
Rule 183   labeled_statement -> DEFAULT COLON statement
Rule 184   compound_statement -> LBRACE RBRACE
Rule 185   compound_statement -> LBRACE statement_list RBRACE
Rule 186   compound_statement -> LBRACE declaration_list RBRACE
Rule 187   compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 188   declaration_list -> declaration
Rule 189   declaration_list -> declaration_list declaration
Rule 190   statement_list -> statement
Rule 191   statement_list -> statement_list statement
Rule 192   expression_statement -> SEMI
Rule 193   expression_statement -> expression SEMI
Rule 194   selection_statement -> IF LPAREN expression RPAREN statement
Rule 195   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 196   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 197   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 198   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 199   iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement
Rule 200   iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 201   jump_statement -> GOTO IDENTIFIER SEMI
Rule 202   jump_statement -> CONTINUE SEMI
Rule 203   jump_statement -> BREAK SEMI
Rule 204   jump_statement -> RETURN SEMI
Rule 205   jump_statement -> RETURN expression SEMI

Terminals, with rules where they appear

AND                  : 58
ANDEQUAL             : 79
ARROW                : 20
BREAK                : 203
CASE                 : 182
CHAR                 : 96
CHARACTER            : 12
COLON                : 68 117 118 181 182 183
COMMA                : 24 83 92 115 127 148 150 155 172 174
CONST                : 130
CONTINUE             : 202
DECREMENT            : 22 27
DEFAULT              : 183
DIVEQUAL             : 73
DIVIDE               : 41
DO                   : 198
DOUBLE               : 101
ELLIPSIS             : 148
ELSE                 : 195
ENUM                 : 123 124 125
EQ                   : 55
EQUALS               : 71 94 129
FLOAT                : 13 100
FOR                  : 199 200
GE                   : 53
GOTO                 : 201
GT                   : 51
IDENTIFIER           : 9 19 20 106 108 124 125 128 129 134 154 155 181 201
IF                   : 194 195
INCREMENT            : 21 26
INT                  : 98
INTEGER              : 11
LAND                 : 64
LBRACE               : 106 107 123 124 171 172 184 185 186 187
LBRACKET             : 16 136 137 162 163 164 165
LE                   : 52
LNOT                 : 36
LONG                 : 99
LOR                  : 66
LPAREN               : 14 17 18 30 38 135 138 139 140 161 166 167 168 169 194 195 196 197 198 199 200
LSHIFT               : 47
LSHIFTEQUAL          : 77
LT                   : 50
MINUS                : 34 45
MINUSEQUAL           : 76
MODEQUAL             : 74
MODULO               : 31 42
NE                   : 56
NOT                  : 35
OR                   : 62
OREQUAL              : 81
PERIOD               : 19
PLUS                 : 33 44
PLUSEQUAL            : 75
RBRACE               : 106 107 123 124 171 172 184 185 186 187
RBRACKET             : 16 136 137 162 163 164 165
RETURN               : 204 205
RPAREN               : 14 17 18 30 38 135 138 139 140 161 166 167 168 169 194 195 196 197 198 199 200
RSHIFT               : 48
RSHIFTEQUAL          : 78
SEMI                 : 85 86 111 192 193 198 201 202 203 204 205
SHORT                : 97
SIGNED               : 102
SIZEOF               : 29 30
STRING               : 10
STRUCT               : 109
SWITCH               : 196
TERNARY              : 68
TIMES                : 32 40 141 142 143 144
TIMESEQUAL           : 72
UNION                : 110
UNSIGNED             : 103
VOID                 : 95
VOLATILE             : 131
WHILE                : 197 198
XOR                  : 60
XOREQUAL             : 80
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 152 157 161
additive_expression  : 44 45 46 47 48
and_expression       : 58 59 60
argument_expression_list : 18 24
assignment_expression : 23 24 70 82 83 170
assignment_operator  : 70
cast_expression      : 28 38 39 40 41 42
compound_statement   : 5 6 7 8 176
conditional_expression : 68 69 84
constant_expression  : 117 118 129 136 163 165 182
declaration          : 4 188 189
declaration_list     : 5 7 186 187 189
declaration_specifiers : 5 6 85 86 88 90 151 152 153
declarator           : 5 6 7 8 93 94 116 118 135 151
direct_abstract_declarator : 159 160 164 165 168 169
direct_declarator    : 132 133 136 137 138 139 140
enum_specifier       : 105
enumerator           : 126 127
enumerator_list      : 123 124 127
equality_expression  : 55 56 57 58
exclusive_or_expression : 60 61 62
expression           : 14 16 68 83 193 194 195 196 197 198 200 205
expression_statement : 177 199 199 200 200
external_declaration : 1 2
function_definition  : 3
identifier_list      : 139 155
inclusive_or_expression : 62 63 64
init_declarator      : 91 92
init_declarator_list : 86 92
initializer          : 94 173 174
initializer_list     : 171 172 174
iteration_statement  : 179
jump_statement       : 180
labeled_statement    : 175
logical_and_expression : 64 65 66
logical_or_expression : 66 67 68
multiplicative_expression : 40 41 42 43 44 45
parameter_declaration : 149 150
parameter_list       : 147 148 150
parameter_type_list  : 138 167 169
pointer              : 132 143 144 158 160
postfix_expression   : 16 17 18 19 20 21 22 25
primary_expression   : 15
relational_expression : 50 51 52 53 54 55 56
selection_statement  : 178
shift_expression     : 47 48 49 50 51 52 53
specifier_qualifier_list : 111 119 121 156 157
statement            : 181 182 183 190 191 194 195 195 196 197 198 199 200
statement_list       : 185 187 191
struct_declaration   : 112 113
struct_declaration_list : 106 107 113
struct_declarator    : 114 115
struct_declarator_list : 111 115
struct_or_union      : 106 107 108
struct_or_union_specifier : 104
translation_unit     : 2 0
type_name            : 30 38
type_qualifier       : 89 90 121 122 145 146
type_qualifier_list  : 142 144 146
type_specifier       : 87 88 119 120
unary_expression     : 26 27 29 37 70
unary_operator       : 28

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (6) function_definition -> . declaration_specifiers declarator compound_statement
    (7) function_definition -> . declarator declaration_list compound_statement
    (8) function_definition -> . declarator compound_statement
    (85) declaration -> . declaration_specifiers SEMI
    (86) declaration -> . declaration_specifiers init_declarator_list SEMI
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    TIMES           shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 26
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    pointer                        shift and go to state 9
    direct_declarator              shift and go to state 10
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (6) function_definition -> . declaration_specifiers declarator compound_statement
    (7) function_definition -> . declarator declaration_list compound_statement
    (8) function_definition -> . declarator compound_statement
    (85) declaration -> . declaration_specifiers SEMI
    (86) declaration -> . declaration_specifiers init_declarator_list SEMI
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    TIMES           shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 26
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    external_declaration           shift and go to state 31
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    pointer                        shift and go to state 9
    direct_declarator              shift and go to state 10
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 2

    (1) translation_unit -> external_declaration .

    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    CONST           reduce using rule 1 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 1 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 1 (translation_unit -> external_declaration .)
    IDENTIFIER      reduce using rule 1 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 1 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 1 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNION           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> function_definition .

    VOID            reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    SHORT           reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    LONG            reduce using rule 3 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 3 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 3 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 3 (external_declaration -> function_definition .)
    CONST           reduce using rule 3 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 3 (external_declaration -> function_definition .)
    TIMES           reduce using rule 3 (external_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 3 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 3 (external_declaration -> function_definition .)
    ENUM            reduce using rule 3 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 3 (external_declaration -> function_definition .)
    UNION           reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 4

    (4) external_declaration -> declaration .

    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    SHORT           reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    LONG            reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 4 (external_declaration -> declaration .)
    SIGNED          reduce using rule 4 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 4 (external_declaration -> declaration .)
    CONST           reduce using rule 4 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 4 (external_declaration -> declaration .)
    TIMES           reduce using rule 4 (external_declaration -> declaration .)
    IDENTIFIER      reduce using rule 4 (external_declaration -> declaration .)
    LPAREN          reduce using rule 4 (external_declaration -> declaration .)
    ENUM            reduce using rule 4 (external_declaration -> declaration .)
    STRUCT          reduce using rule 4 (external_declaration -> declaration .)
    UNION           reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (6) function_definition -> declaration_specifiers . declarator compound_statement
    (85) declaration -> declaration_specifiers . SEMI
    (86) declaration -> declaration_specifiers . init_declarator_list SEMI
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (91) init_declarator_list -> . init_declarator
    (92) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN
    (93) init_declarator -> . declarator
    (94) init_declarator -> . declarator EQUALS initializer

    SEMI            shift and go to state 33
    TIMES           shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 26

    declarator                     shift and go to state 32
    init_declarator_list           shift and go to state 34
    pointer                        shift and go to state 9
    direct_declarator              shift and go to state 10
    init_declarator                shift and go to state 35

state 6

    (7) function_definition -> declarator . declaration_list compound_statement
    (8) function_definition -> declarator . compound_statement
    (188) declaration_list -> . declaration
    (189) declaration_list -> . declaration_list declaration
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (85) declaration -> . declaration_specifiers SEMI
    (86) declaration -> . declaration_specifiers init_declarator_list SEMI
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    LBRACE          shift and go to state 39
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    declaration_list               shift and go to state 36
    compound_statement             shift and go to state 37
    declaration                    shift and go to state 38
    declaration_specifiers         shift and go to state 40
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 7

    (87) declaration_specifiers -> type_specifier .
    (88) declaration_specifiers -> type_specifier . declaration_specifiers
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    SEMI            reduce using rule 87 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 87 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 87 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 87 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 87 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 87 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 87 (declaration_specifiers -> type_specifier .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    type_specifier                 shift and go to state 7
    declaration_specifiers         shift and go to state 41
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 8

    (89) declaration_specifiers -> type_qualifier .
    (90) declaration_specifiers -> type_qualifier . declaration_specifiers
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    SEMI            reduce using rule 89 (declaration_specifiers -> type_qualifier .)
    TIMES           reduce using rule 89 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 89 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 89 (declaration_specifiers -> type_qualifier .)
    LBRACKET        reduce using rule 89 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 89 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 89 (declaration_specifiers -> type_qualifier .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    type_qualifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 42
    type_specifier                 shift and go to state 7
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 9

    (132) declarator -> pointer . direct_declarator
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN

    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 26

    direct_declarator              shift and go to state 43

state 10

    (133) declarator -> direct_declarator .
    (136) direct_declarator -> direct_declarator . LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (138) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (140) direct_declarator -> direct_declarator . LPAREN RPAREN

    LBRACE          reduce using rule 133 (declarator -> direct_declarator .)
    VOID            reduce using rule 133 (declarator -> direct_declarator .)
    CHAR            reduce using rule 133 (declarator -> direct_declarator .)
    SHORT           reduce using rule 133 (declarator -> direct_declarator .)
    INT             reduce using rule 133 (declarator -> direct_declarator .)
    LONG            reduce using rule 133 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 133 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 133 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 133 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 133 (declarator -> direct_declarator .)
    CONST           reduce using rule 133 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 133 (declarator -> direct_declarator .)
    ENUM            reduce using rule 133 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 133 (declarator -> direct_declarator .)
    UNION           reduce using rule 133 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 133 (declarator -> direct_declarator .)
    SEMI            reduce using rule 133 (declarator -> direct_declarator .)
    COMMA           reduce using rule 133 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 133 (declarator -> direct_declarator .)
    COLON           reduce using rule 133 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 44
    LPAREN          shift and go to state 45


state 11

    (95) type_specifier -> VOID .

    VOID            reduce using rule 95 (type_specifier -> VOID .)
    CHAR            reduce using rule 95 (type_specifier -> VOID .)
    SHORT           reduce using rule 95 (type_specifier -> VOID .)
    INT             reduce using rule 95 (type_specifier -> VOID .)
    LONG            reduce using rule 95 (type_specifier -> VOID .)
    FLOAT           reduce using rule 95 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 95 (type_specifier -> VOID .)
    SIGNED          reduce using rule 95 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 95 (type_specifier -> VOID .)
    CONST           reduce using rule 95 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 95 (type_specifier -> VOID .)
    ENUM            reduce using rule 95 (type_specifier -> VOID .)
    STRUCT          reduce using rule 95 (type_specifier -> VOID .)
    UNION           reduce using rule 95 (type_specifier -> VOID .)
    SEMI            reduce using rule 95 (type_specifier -> VOID .)
    TIMES           reduce using rule 95 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 95 (type_specifier -> VOID .)
    LPAREN          reduce using rule 95 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 95 (type_specifier -> VOID .)
    COMMA           reduce using rule 95 (type_specifier -> VOID .)
    RPAREN          reduce using rule 95 (type_specifier -> VOID .)
    COLON           reduce using rule 95 (type_specifier -> VOID .)


state 12

    (96) type_specifier -> CHAR .

    VOID            reduce using rule 96 (type_specifier -> CHAR .)
    CHAR            reduce using rule 96 (type_specifier -> CHAR .)
    SHORT           reduce using rule 96 (type_specifier -> CHAR .)
    INT             reduce using rule 96 (type_specifier -> CHAR .)
    LONG            reduce using rule 96 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 96 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 96 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 96 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 96 (type_specifier -> CHAR .)
    CONST           reduce using rule 96 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 96 (type_specifier -> CHAR .)
    ENUM            reduce using rule 96 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 96 (type_specifier -> CHAR .)
    UNION           reduce using rule 96 (type_specifier -> CHAR .)
    SEMI            reduce using rule 96 (type_specifier -> CHAR .)
    TIMES           reduce using rule 96 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 96 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 96 (type_specifier -> CHAR .)
    LBRACKET        reduce using rule 96 (type_specifier -> CHAR .)
    COMMA           reduce using rule 96 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 96 (type_specifier -> CHAR .)
    COLON           reduce using rule 96 (type_specifier -> CHAR .)


state 13

    (97) type_specifier -> SHORT .

    VOID            reduce using rule 97 (type_specifier -> SHORT .)
    CHAR            reduce using rule 97 (type_specifier -> SHORT .)
    SHORT           reduce using rule 97 (type_specifier -> SHORT .)
    INT             reduce using rule 97 (type_specifier -> SHORT .)
    LONG            reduce using rule 97 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 97 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 97 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 97 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 97 (type_specifier -> SHORT .)
    CONST           reduce using rule 97 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 97 (type_specifier -> SHORT .)
    ENUM            reduce using rule 97 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 97 (type_specifier -> SHORT .)
    UNION           reduce using rule 97 (type_specifier -> SHORT .)
    SEMI            reduce using rule 97 (type_specifier -> SHORT .)
    TIMES           reduce using rule 97 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 97 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 97 (type_specifier -> SHORT .)
    LBRACKET        reduce using rule 97 (type_specifier -> SHORT .)
    COMMA           reduce using rule 97 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 97 (type_specifier -> SHORT .)
    COLON           reduce using rule 97 (type_specifier -> SHORT .)


state 14

    (98) type_specifier -> INT .

    VOID            reduce using rule 98 (type_specifier -> INT .)
    CHAR            reduce using rule 98 (type_specifier -> INT .)
    SHORT           reduce using rule 98 (type_specifier -> INT .)
    INT             reduce using rule 98 (type_specifier -> INT .)
    LONG            reduce using rule 98 (type_specifier -> INT .)
    FLOAT           reduce using rule 98 (type_specifier -> INT .)
    DOUBLE          reduce using rule 98 (type_specifier -> INT .)
    SIGNED          reduce using rule 98 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 98 (type_specifier -> INT .)
    CONST           reduce using rule 98 (type_specifier -> INT .)
    VOLATILE        reduce using rule 98 (type_specifier -> INT .)
    ENUM            reduce using rule 98 (type_specifier -> INT .)
    STRUCT          reduce using rule 98 (type_specifier -> INT .)
    UNION           reduce using rule 98 (type_specifier -> INT .)
    SEMI            reduce using rule 98 (type_specifier -> INT .)
    TIMES           reduce using rule 98 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 98 (type_specifier -> INT .)
    LPAREN          reduce using rule 98 (type_specifier -> INT .)
    LBRACKET        reduce using rule 98 (type_specifier -> INT .)
    COMMA           reduce using rule 98 (type_specifier -> INT .)
    RPAREN          reduce using rule 98 (type_specifier -> INT .)
    COLON           reduce using rule 98 (type_specifier -> INT .)


state 15

    (99) type_specifier -> LONG .

    VOID            reduce using rule 99 (type_specifier -> LONG .)
    CHAR            reduce using rule 99 (type_specifier -> LONG .)
    SHORT           reduce using rule 99 (type_specifier -> LONG .)
    INT             reduce using rule 99 (type_specifier -> LONG .)
    LONG            reduce using rule 99 (type_specifier -> LONG .)
    FLOAT           reduce using rule 99 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 99 (type_specifier -> LONG .)
    SIGNED          reduce using rule 99 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 99 (type_specifier -> LONG .)
    CONST           reduce using rule 99 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 99 (type_specifier -> LONG .)
    ENUM            reduce using rule 99 (type_specifier -> LONG .)
    STRUCT          reduce using rule 99 (type_specifier -> LONG .)
    UNION           reduce using rule 99 (type_specifier -> LONG .)
    SEMI            reduce using rule 99 (type_specifier -> LONG .)
    TIMES           reduce using rule 99 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 99 (type_specifier -> LONG .)
    LPAREN          reduce using rule 99 (type_specifier -> LONG .)
    LBRACKET        reduce using rule 99 (type_specifier -> LONG .)
    COMMA           reduce using rule 99 (type_specifier -> LONG .)
    RPAREN          reduce using rule 99 (type_specifier -> LONG .)
    COLON           reduce using rule 99 (type_specifier -> LONG .)


state 16

    (100) type_specifier -> FLOAT .

    VOID            reduce using rule 100 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 100 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 100 (type_specifier -> FLOAT .)
    INT             reduce using rule 100 (type_specifier -> FLOAT .)
    LONG            reduce using rule 100 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 100 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 100 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 100 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 100 (type_specifier -> FLOAT .)
    CONST           reduce using rule 100 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 100 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 100 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 100 (type_specifier -> FLOAT .)
    UNION           reduce using rule 100 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 100 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 100 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 100 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 100 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 100 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 100 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 100 (type_specifier -> FLOAT .)
    COLON           reduce using rule 100 (type_specifier -> FLOAT .)


state 17

    (101) type_specifier -> DOUBLE .

    VOID            reduce using rule 101 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 101 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 101 (type_specifier -> DOUBLE .)
    INT             reduce using rule 101 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 101 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 101 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 101 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 101 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 101 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 101 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 101 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 101 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 101 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 101 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 101 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 101 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 101 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 101 (type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 101 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 101 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 101 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 101 (type_specifier -> DOUBLE .)


state 18

    (102) type_specifier -> SIGNED .

    VOID            reduce using rule 102 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 102 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 102 (type_specifier -> SIGNED .)
    INT             reduce using rule 102 (type_specifier -> SIGNED .)
    LONG            reduce using rule 102 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 102 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 102 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 102 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 102 (type_specifier -> SIGNED .)
    CONST           reduce using rule 102 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 102 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 102 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 102 (type_specifier -> SIGNED .)
    UNION           reduce using rule 102 (type_specifier -> SIGNED .)
    SEMI            reduce using rule 102 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 102 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 102 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 102 (type_specifier -> SIGNED .)
    LBRACKET        reduce using rule 102 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 102 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 102 (type_specifier -> SIGNED .)
    COLON           reduce using rule 102 (type_specifier -> SIGNED .)


state 19

    (103) type_specifier -> UNSIGNED .

    VOID            reduce using rule 103 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 103 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 103 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 103 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 103 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 103 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 103 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 103 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 103 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 103 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 103 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 103 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 103 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 103 (type_specifier -> UNSIGNED .)
    SEMI            reduce using rule 103 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 103 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 103 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 103 (type_specifier -> UNSIGNED .)
    LBRACKET        reduce using rule 103 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 103 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 103 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 103 (type_specifier -> UNSIGNED .)


state 20

    (104) type_specifier -> struct_or_union_specifier .

    VOID            reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 104 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 104 (type_specifier -> struct_or_union_specifier .)


state 21

    (105) type_specifier -> enum_specifier .

    VOID            reduce using rule 105 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 105 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 105 (type_specifier -> enum_specifier .)
    INT             reduce using rule 105 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 105 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 105 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 105 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 105 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 105 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 105 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 105 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 105 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 105 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 105 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 105 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 105 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 105 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 105 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 105 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 105 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 105 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 105 (type_specifier -> enum_specifier .)


state 22

    (130) type_qualifier -> CONST .

    VOID            reduce using rule 130 (type_qualifier -> CONST .)
    CHAR            reduce using rule 130 (type_qualifier -> CONST .)
    SHORT           reduce using rule 130 (type_qualifier -> CONST .)
    INT             reduce using rule 130 (type_qualifier -> CONST .)
    LONG            reduce using rule 130 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 130 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 130 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 130 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 130 (type_qualifier -> CONST .)
    CONST           reduce using rule 130 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 130 (type_qualifier -> CONST .)
    ENUM            reduce using rule 130 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 130 (type_qualifier -> CONST .)
    UNION           reduce using rule 130 (type_qualifier -> CONST .)
    SEMI            reduce using rule 130 (type_qualifier -> CONST .)
    TIMES           reduce using rule 130 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 130 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 130 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 130 (type_qualifier -> CONST .)
    COMMA           reduce using rule 130 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 130 (type_qualifier -> CONST .)
    COLON           reduce using rule 130 (type_qualifier -> CONST .)


state 23

    (131) type_qualifier -> VOLATILE .

    VOID            reduce using rule 131 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 131 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 131 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 131 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 131 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 131 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 131 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 131 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 131 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 131 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 131 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 131 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 131 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 131 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 131 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 131 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 131 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 131 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 131 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 131 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 131 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 131 (type_qualifier -> VOLATILE .)


state 24

    (141) pointer -> TIMES .
    (142) pointer -> TIMES . type_qualifier_list
    (143) pointer -> TIMES . pointer
    (144) pointer -> TIMES . type_qualifier_list pointer
    (145) type_qualifier_list -> . type_qualifier
    (146) type_qualifier_list -> . type_qualifier_list type_qualifier
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 141 (pointer -> TIMES .)
    LPAREN          reduce using rule 141 (pointer -> TIMES .)
    LBRACKET        reduce using rule 141 (pointer -> TIMES .)
    COMMA           reduce using rule 141 (pointer -> TIMES .)
    RPAREN          reduce using rule 141 (pointer -> TIMES .)
    TIMES           shift and go to state 24
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23

    type_qualifier_list            shift and go to state 46
    pointer                        shift and go to state 47
    type_qualifier                 shift and go to state 48

state 25

    (134) direct_declarator -> IDENTIFIER .

    LBRACKET        reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    LPAREN          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    LBRACE          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    EQUALS          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    SEMI            reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    RPAREN          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 134 (direct_declarator -> IDENTIFIER .)


state 26

    (135) direct_declarator -> LPAREN . declarator RPAREN
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN

    TIMES           shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 26

    declarator                     shift and go to state 49
    pointer                        shift and go to state 9
    direct_declarator              shift and go to state 10

state 27

    (106) struct_or_union_specifier -> struct_or_union . IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> struct_or_union . LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 50
    LBRACE          shift and go to state 51


state 28

    (123) enum_specifier -> ENUM . LBRACE enumerator_list RBRACE
    (124) enum_specifier -> ENUM . IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> ENUM . IDENTIFIER

    LBRACE          shift and go to state 52
    IDENTIFIER      shift and go to state 53


state 29

    (109) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 109 (struct_or_union -> STRUCT .)
    LBRACE          reduce using rule 109 (struct_or_union -> STRUCT .)


state 30

    (110) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 110 (struct_or_union -> UNION .)
    LBRACE          reduce using rule 110 (struct_or_union -> UNION .)


state 31

    (2) translation_unit -> translation_unit external_declaration .

    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    IDENTIFIER      reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 32

    (5) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (6) function_definition -> declaration_specifiers declarator . compound_statement
    (93) init_declarator -> declarator .
    (94) init_declarator -> declarator . EQUALS initializer
    (188) declaration_list -> . declaration
    (189) declaration_list -> . declaration_list declaration
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (85) declaration -> . declaration_specifiers SEMI
    (86) declaration -> . declaration_specifiers init_declarator_list SEMI
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    SEMI            reduce using rule 93 (init_declarator -> declarator .)
    COMMA           reduce using rule 93 (init_declarator -> declarator .)
    EQUALS          shift and go to state 56
    LBRACE          shift and go to state 39
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    declaration_specifiers         shift and go to state 40
    declaration_list               shift and go to state 54
    compound_statement             shift and go to state 55
    declaration                    shift and go to state 38
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 33

    (85) declaration -> declaration_specifiers SEMI .

    VOID            reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    CHAR            reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    SHORT           reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    INT             reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    LONG            reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    FLOAT           reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    DOUBLE          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    SIGNED          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    UNSIGNED        reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    CONST           reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    VOLATILE        reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    TIMES           reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    IDENTIFIER      reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    LPAREN          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    ENUM            reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    STRUCT          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    UNION           reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    $end            reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    LBRACE          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    RBRACE          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    CASE            reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    DEFAULT         reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    SEMI            reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    IF              reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    SWITCH          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    WHILE           reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    DO              reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    FOR             reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    GOTO            reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    CONTINUE        reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    BREAK           reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    RETURN          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    INCREMENT       reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    DECREMENT       reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    SIZEOF          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    MODULO          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    PLUS            reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    MINUS           reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    NOT             reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    LNOT            reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    STRING          reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    INTEGER         reduce using rule 85 (declaration -> declaration_specifiers SEMI .)
    CHARACTER       reduce using rule 85 (declaration -> declaration_specifiers SEMI .)


state 34

    (86) declaration -> declaration_specifiers init_declarator_list . SEMI
    (92) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 57
    COMMA           shift and go to state 58


state 35

    (91) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 91 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 91 (init_declarator_list -> init_declarator .)


state 36

    (7) function_definition -> declarator declaration_list . compound_statement
    (189) declaration_list -> declaration_list . declaration
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (85) declaration -> . declaration_specifiers SEMI
    (86) declaration -> . declaration_specifiers init_declarator_list SEMI
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    LBRACE          shift and go to state 39
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    compound_statement             shift and go to state 59
    declaration                    shift and go to state 60
    declaration_specifiers         shift and go to state 40
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 37

    (8) function_definition -> declarator compound_statement .

    VOID            reduce using rule 8 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 8 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 8 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 8 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 8 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 8 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 8 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 8 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 8 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 8 (function_definition -> declarator compound_statement .)
    VOLATILE        reduce using rule 8 (function_definition -> declarator compound_statement .)
    TIMES           reduce using rule 8 (function_definition -> declarator compound_statement .)
    IDENTIFIER      reduce using rule 8 (function_definition -> declarator compound_statement .)
    LPAREN          reduce using rule 8 (function_definition -> declarator compound_statement .)
    ENUM            reduce using rule 8 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 8 (function_definition -> declarator compound_statement .)
    UNION           reduce using rule 8 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 8 (function_definition -> declarator compound_statement .)


state 38

    (188) declaration_list -> declaration .

    LBRACE          reduce using rule 188 (declaration_list -> declaration .)
    VOID            reduce using rule 188 (declaration_list -> declaration .)
    CHAR            reduce using rule 188 (declaration_list -> declaration .)
    SHORT           reduce using rule 188 (declaration_list -> declaration .)
    INT             reduce using rule 188 (declaration_list -> declaration .)
    LONG            reduce using rule 188 (declaration_list -> declaration .)
    FLOAT           reduce using rule 188 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 188 (declaration_list -> declaration .)
    SIGNED          reduce using rule 188 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 188 (declaration_list -> declaration .)
    CONST           reduce using rule 188 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 188 (declaration_list -> declaration .)
    ENUM            reduce using rule 188 (declaration_list -> declaration .)
    STRUCT          reduce using rule 188 (declaration_list -> declaration .)
    UNION           reduce using rule 188 (declaration_list -> declaration .)
    RBRACE          reduce using rule 188 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 188 (declaration_list -> declaration .)
    CASE            reduce using rule 188 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 188 (declaration_list -> declaration .)
    SEMI            reduce using rule 188 (declaration_list -> declaration .)
    IF              reduce using rule 188 (declaration_list -> declaration .)
    SWITCH          reduce using rule 188 (declaration_list -> declaration .)
    WHILE           reduce using rule 188 (declaration_list -> declaration .)
    DO              reduce using rule 188 (declaration_list -> declaration .)
    FOR             reduce using rule 188 (declaration_list -> declaration .)
    GOTO            reduce using rule 188 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 188 (declaration_list -> declaration .)
    BREAK           reduce using rule 188 (declaration_list -> declaration .)
    RETURN          reduce using rule 188 (declaration_list -> declaration .)
    INCREMENT       reduce using rule 188 (declaration_list -> declaration .)
    DECREMENT       reduce using rule 188 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 188 (declaration_list -> declaration .)
    MODULO          reduce using rule 188 (declaration_list -> declaration .)
    TIMES           reduce using rule 188 (declaration_list -> declaration .)
    PLUS            reduce using rule 188 (declaration_list -> declaration .)
    MINUS           reduce using rule 188 (declaration_list -> declaration .)
    NOT             reduce using rule 188 (declaration_list -> declaration .)
    LNOT            reduce using rule 188 (declaration_list -> declaration .)
    STRING          reduce using rule 188 (declaration_list -> declaration .)
    INTEGER         reduce using rule 188 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 188 (declaration_list -> declaration .)
    LPAREN          reduce using rule 188 (declaration_list -> declaration .)


state 39

    (184) compound_statement -> LBRACE . RBRACE
    (185) compound_statement -> LBRACE . statement_list RBRACE
    (186) compound_statement -> LBRACE . declaration_list RBRACE
    (187) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (190) statement_list -> . statement
    (191) statement_list -> . statement_list statement
    (188) declaration_list -> . declaration
    (189) declaration_list -> . declaration_list declaration
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (85) declaration -> . declaration_specifiers SEMI
    (86) declaration -> . declaration_specifiers init_declarator_list SEMI
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 61
    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 87
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    LPAREN          shift and go to state 77

    statement_list                 shift and go to state 62
    declaration_list               shift and go to state 63
    statement                      shift and go to state 64
    declaration                    shift and go to state 38
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    declaration_specifiers         shift and go to state 40
    expression                     shift and go to state 75
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    assignment_expression          shift and go to state 86
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    struct_or_union                shift and go to state 27
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 40

    (85) declaration -> declaration_specifiers . SEMI
    (86) declaration -> declaration_specifiers . init_declarator_list SEMI
    (91) init_declarator_list -> . init_declarator
    (92) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (93) init_declarator -> . declarator
    (94) init_declarator -> . declarator EQUALS initializer
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN

    SEMI            shift and go to state 33
    TIMES           shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 26

    init_declarator_list           shift and go to state 34
    init_declarator                shift and go to state 35
    declarator                     shift and go to state 116
    pointer                        shift and go to state 9
    direct_declarator              shift and go to state 10

state 41

    (88) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI            reduce using rule 88 (declaration_specifiers -> type_specifier declaration_specifiers .)
    TIMES           reduce using rule 88 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 88 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 88 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 88 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 88 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 88 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 42

    (90) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMI            reduce using rule 90 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    TIMES           reduce using rule 90 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 90 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 90 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LBRACKET        reduce using rule 90 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 90 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 90 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 43

    (132) declarator -> pointer direct_declarator .
    (136) direct_declarator -> direct_declarator . LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (138) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (140) direct_declarator -> direct_declarator . LPAREN RPAREN

    LBRACE          reduce using rule 132 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 132 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 132 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 132 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 132 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 132 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 132 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 132 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 132 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 132 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 132 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 132 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 132 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 132 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 132 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 132 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 132 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 132 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 132 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 132 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 44
    LPAREN          shift and go to state 45


state 44

    (136) direct_declarator -> direct_declarator LBRACKET . constant_expression RBRACKET
    (137) direct_declarator -> direct_declarator LBRACKET . RBRACKET
    (84) constant_expression -> . conditional_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    RBRACKET        shift and go to state 118
    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    constant_expression            shift and go to state 117
    conditional_expression         shift and go to state 119
    logical_or_expression          shift and go to state 90
    logical_and_expression         shift and go to state 97
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 45

    (138) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (139) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (140) direct_declarator -> direct_declarator LPAREN . RPAREN
    (147) parameter_type_list -> . parameter_list
    (148) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (154) identifier_list -> . IDENTIFIER
    (155) identifier_list -> . identifier_list COMMA IDENTIFIER
    (149) parameter_list -> . parameter_declaration
    (150) parameter_list -> . parameter_list COMMA parameter_declaration
    (151) parameter_declaration -> . declaration_specifiers declarator
    (152) parameter_declaration -> . declaration_specifiers abstract_declarator
    (153) parameter_declaration -> . declaration_specifiers
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    RPAREN          shift and go to state 125
    IDENTIFIER      shift and go to state 128
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    parameter_type_list            shift and go to state 124
    identifier_list                shift and go to state 126
    parameter_list                 shift and go to state 127
    parameter_declaration          shift and go to state 129
    declaration_specifiers         shift and go to state 130
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 46

    (142) pointer -> TIMES type_qualifier_list .
    (144) pointer -> TIMES type_qualifier_list . pointer
    (146) type_qualifier_list -> type_qualifier_list . type_qualifier
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 142 (pointer -> TIMES type_qualifier_list .)
    LPAREN          reduce using rule 142 (pointer -> TIMES type_qualifier_list .)
    LBRACKET        reduce using rule 142 (pointer -> TIMES type_qualifier_list .)
    COMMA           reduce using rule 142 (pointer -> TIMES type_qualifier_list .)
    RPAREN          reduce using rule 142 (pointer -> TIMES type_qualifier_list .)
    TIMES           shift and go to state 24
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23

    pointer                        shift and go to state 131
    type_qualifier                 shift and go to state 132

state 47

    (143) pointer -> TIMES pointer .

    IDENTIFIER      reduce using rule 143 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 143 (pointer -> TIMES pointer .)
    LBRACKET        reduce using rule 143 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 143 (pointer -> TIMES pointer .)
    RPAREN          reduce using rule 143 (pointer -> TIMES pointer .)


state 48

    (145) type_qualifier_list -> type_qualifier .

    TIMES           reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 145 (type_qualifier_list -> type_qualifier .)


state 49

    (135) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 133


state 50

    (106) struct_or_union_specifier -> struct_or_union IDENTIFIER . LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    LBRACE          shift and go to state 134
    VOID            reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SEMI            reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TIMES           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LPAREN          reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LBRACKET        reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RPAREN          reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 51

    (107) struct_or_union_specifier -> struct_or_union LBRACE . struct_declaration_list RBRACE
    (112) struct_declaration_list -> . struct_declaration
    (113) struct_declaration_list -> . struct_declaration_list struct_declaration
    (111) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (119) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_specifier
    (121) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_qualifier
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    struct_or_union                shift and go to state 27
    struct_declaration_list        shift and go to state 135
    struct_declaration             shift and go to state 136
    specifier_qualifier_list       shift and go to state 137
    type_specifier                 shift and go to state 138
    type_qualifier                 shift and go to state 139
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21

state 52

    (123) enum_specifier -> ENUM LBRACE . enumerator_list RBRACE
    (126) enumerator_list -> . enumerator
    (127) enumerator_list -> . enumerator_list COMMA enumerator
    (128) enumerator -> . IDENTIFIER
    (129) enumerator -> . IDENTIFIER EQUALS constant_expression

    IDENTIFIER      shift and go to state 142

    enumerator_list                shift and go to state 140
    enumerator                     shift and go to state 141

state 53

    (124) enum_specifier -> ENUM IDENTIFIER . LBRACE enumerator_list RBRACE
    (125) enum_specifier -> ENUM IDENTIFIER .

    LBRACE          shift and go to state 143
    VOID            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    SEMI            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    TIMES           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    LPAREN          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    LBRACKET        reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    RPAREN          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)


state 54

    (5) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (189) declaration_list -> declaration_list . declaration
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (85) declaration -> . declaration_specifiers SEMI
    (86) declaration -> . declaration_specifiers init_declarator_list SEMI
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    LBRACE          shift and go to state 39
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    declaration_specifiers         shift and go to state 40
    compound_statement             shift and go to state 144
    declaration                    shift and go to state 60
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 55

    (6) function_definition -> declaration_specifiers declarator compound_statement .

    VOID            reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    TIMES           reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    IDENTIFIER      reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)


state 56

    (94) init_declarator -> declarator EQUALS . initializer
    (170) initializer -> . assignment_expression
    (171) initializer -> . LBRACE initializer_list RBRACE
    (172) initializer -> . LBRACE initializer_list COMMA RBRACE
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 147
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    initializer                    shift and go to state 145
    assignment_expression          shift and go to state 146
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 57

    (86) declaration -> declaration_specifiers init_declarator_list SEMI .

    VOID            reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHAR            reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SHORT           reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LONG            reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT           reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DOUBLE          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIGNED          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNSIGNED        reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONST           reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOLATILE        reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TIMES           reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IDENTIFIER      reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LPAREN          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ENUM            reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRUCT          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNION           reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LBRACE          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RBRACE          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CASE            reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEFAULT         reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SWITCH          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DO              reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    GOTO            reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONTINUE        reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INCREMENT       reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DECREMENT       reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIZEOF          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MODULO          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    NOT             reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LNOT            reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRING          reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INTEGER         reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHARACTER       reduce using rule 86 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 58

    (92) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (93) init_declarator -> . declarator
    (94) init_declarator -> . declarator EQUALS initializer
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN

    TIMES           shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 26

    init_declarator                shift and go to state 148
    declarator                     shift and go to state 116
    pointer                        shift and go to state 9
    direct_declarator              shift and go to state 10

state 59

    (7) function_definition -> declarator declaration_list compound_statement .

    VOID            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    SHORT           reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    LONG            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    CONST           reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    TIMES           reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    ENUM            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    UNION           reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)


state 60

    (189) declaration_list -> declaration_list declaration .

    LBRACE          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 189 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 189 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 189 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    INCREMENT       reduce using rule 189 (declaration_list -> declaration_list declaration .)
    DECREMENT       reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    MODULO          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 189 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    INTEGER         reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 189 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 189 (declaration_list -> declaration_list declaration .)


state 61

    (184) compound_statement -> LBRACE RBRACE .

    VOID            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    SHORT           reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    LONG            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    SIGNED          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    UNSIGNED        reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    CONST           reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    VOLATILE        reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    ENUM            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    STRUCT          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    UNION           reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    CASE            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    GOTO            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    INCREMENT       reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    DECREMENT       reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    SIZEOF          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    MODULO          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    NOT             reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    STRING          reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    INTEGER         reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    CHARACTER       reduce using rule 184 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 184 (compound_statement -> LBRACE RBRACE .)


state 62

    (185) compound_statement -> LBRACE statement_list . RBRACE
    (191) statement_list -> statement_list . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 149
    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    statement                      shift and go to state 150
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    expression                     shift and go to state 75
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 63

    (186) compound_statement -> LBRACE declaration_list . RBRACE
    (187) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (189) declaration_list -> declaration_list . declaration
    (190) statement_list -> . statement
    (191) statement_list -> . statement_list statement
    (85) declaration -> . declaration_specifiers SEMI
    (86) declaration -> . declaration_specifiers init_declarator_list SEMI
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 151
    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 87
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    LPAREN          shift and go to state 77

    statement_list                 shift and go to state 152
    declaration                    shift and go to state 60
    statement                      shift and go to state 64
    declaration_specifiers         shift and go to state 40
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    expression                     shift and go to state 75
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    assignment_expression          shift and go to state 86
    struct_or_union                shift and go to state 27
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 64

    (190) statement_list -> statement .

    RBRACE          reduce using rule 190 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 190 (statement_list -> statement .)
    CASE            reduce using rule 190 (statement_list -> statement .)
    DEFAULT         reduce using rule 190 (statement_list -> statement .)
    LBRACE          reduce using rule 190 (statement_list -> statement .)
    SEMI            reduce using rule 190 (statement_list -> statement .)
    IF              reduce using rule 190 (statement_list -> statement .)
    SWITCH          reduce using rule 190 (statement_list -> statement .)
    WHILE           reduce using rule 190 (statement_list -> statement .)
    DO              reduce using rule 190 (statement_list -> statement .)
    FOR             reduce using rule 190 (statement_list -> statement .)
    GOTO            reduce using rule 190 (statement_list -> statement .)
    CONTINUE        reduce using rule 190 (statement_list -> statement .)
    BREAK           reduce using rule 190 (statement_list -> statement .)
    RETURN          reduce using rule 190 (statement_list -> statement .)
    INCREMENT       reduce using rule 190 (statement_list -> statement .)
    DECREMENT       reduce using rule 190 (statement_list -> statement .)
    SIZEOF          reduce using rule 190 (statement_list -> statement .)
    MODULO          reduce using rule 190 (statement_list -> statement .)
    TIMES           reduce using rule 190 (statement_list -> statement .)
    PLUS            reduce using rule 190 (statement_list -> statement .)
    MINUS           reduce using rule 190 (statement_list -> statement .)
    NOT             reduce using rule 190 (statement_list -> statement .)
    LNOT            reduce using rule 190 (statement_list -> statement .)
    STRING          reduce using rule 190 (statement_list -> statement .)
    INTEGER         reduce using rule 190 (statement_list -> statement .)
    CHARACTER       reduce using rule 190 (statement_list -> statement .)
    FLOAT           reduce using rule 190 (statement_list -> statement .)
    LPAREN          reduce using rule 190 (statement_list -> statement .)


state 65

    (175) statement -> labeled_statement .

    RBRACE          reduce using rule 175 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 175 (statement -> labeled_statement .)
    CASE            reduce using rule 175 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 175 (statement -> labeled_statement .)
    LBRACE          reduce using rule 175 (statement -> labeled_statement .)
    SEMI            reduce using rule 175 (statement -> labeled_statement .)
    IF              reduce using rule 175 (statement -> labeled_statement .)
    SWITCH          reduce using rule 175 (statement -> labeled_statement .)
    WHILE           reduce using rule 175 (statement -> labeled_statement .)
    DO              reduce using rule 175 (statement -> labeled_statement .)
    FOR             reduce using rule 175 (statement -> labeled_statement .)
    GOTO            reduce using rule 175 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 175 (statement -> labeled_statement .)
    BREAK           reduce using rule 175 (statement -> labeled_statement .)
    RETURN          reduce using rule 175 (statement -> labeled_statement .)
    INCREMENT       reduce using rule 175 (statement -> labeled_statement .)
    DECREMENT       reduce using rule 175 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 175 (statement -> labeled_statement .)
    MODULO          reduce using rule 175 (statement -> labeled_statement .)
    TIMES           reduce using rule 175 (statement -> labeled_statement .)
    PLUS            reduce using rule 175 (statement -> labeled_statement .)
    MINUS           reduce using rule 175 (statement -> labeled_statement .)
    NOT             reduce using rule 175 (statement -> labeled_statement .)
    LNOT            reduce using rule 175 (statement -> labeled_statement .)
    STRING          reduce using rule 175 (statement -> labeled_statement .)
    INTEGER         reduce using rule 175 (statement -> labeled_statement .)
    CHARACTER       reduce using rule 175 (statement -> labeled_statement .)
    FLOAT           reduce using rule 175 (statement -> labeled_statement .)
    LPAREN          reduce using rule 175 (statement -> labeled_statement .)
    ELSE            reduce using rule 175 (statement -> labeled_statement .)


state 66

    (176) statement -> compound_statement .

    RBRACE          reduce using rule 176 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 176 (statement -> compound_statement .)
    CASE            reduce using rule 176 (statement -> compound_statement .)
    DEFAULT         reduce using rule 176 (statement -> compound_statement .)
    LBRACE          reduce using rule 176 (statement -> compound_statement .)
    SEMI            reduce using rule 176 (statement -> compound_statement .)
    IF              reduce using rule 176 (statement -> compound_statement .)
    SWITCH          reduce using rule 176 (statement -> compound_statement .)
    WHILE           reduce using rule 176 (statement -> compound_statement .)
    DO              reduce using rule 176 (statement -> compound_statement .)
    FOR             reduce using rule 176 (statement -> compound_statement .)
    GOTO            reduce using rule 176 (statement -> compound_statement .)
    CONTINUE        reduce using rule 176 (statement -> compound_statement .)
    BREAK           reduce using rule 176 (statement -> compound_statement .)
    RETURN          reduce using rule 176 (statement -> compound_statement .)
    INCREMENT       reduce using rule 176 (statement -> compound_statement .)
    DECREMENT       reduce using rule 176 (statement -> compound_statement .)
    SIZEOF          reduce using rule 176 (statement -> compound_statement .)
    MODULO          reduce using rule 176 (statement -> compound_statement .)
    TIMES           reduce using rule 176 (statement -> compound_statement .)
    PLUS            reduce using rule 176 (statement -> compound_statement .)
    MINUS           reduce using rule 176 (statement -> compound_statement .)
    NOT             reduce using rule 176 (statement -> compound_statement .)
    LNOT            reduce using rule 176 (statement -> compound_statement .)
    STRING          reduce using rule 176 (statement -> compound_statement .)
    INTEGER         reduce using rule 176 (statement -> compound_statement .)
    CHARACTER       reduce using rule 176 (statement -> compound_statement .)
    FLOAT           reduce using rule 176 (statement -> compound_statement .)
    LPAREN          reduce using rule 176 (statement -> compound_statement .)
    ELSE            reduce using rule 176 (statement -> compound_statement .)


state 67

    (177) statement -> expression_statement .

    RBRACE          reduce using rule 177 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 177 (statement -> expression_statement .)
    CASE            reduce using rule 177 (statement -> expression_statement .)
    DEFAULT         reduce using rule 177 (statement -> expression_statement .)
    LBRACE          reduce using rule 177 (statement -> expression_statement .)
    SEMI            reduce using rule 177 (statement -> expression_statement .)
    IF              reduce using rule 177 (statement -> expression_statement .)
    SWITCH          reduce using rule 177 (statement -> expression_statement .)
    WHILE           reduce using rule 177 (statement -> expression_statement .)
    DO              reduce using rule 177 (statement -> expression_statement .)
    FOR             reduce using rule 177 (statement -> expression_statement .)
    GOTO            reduce using rule 177 (statement -> expression_statement .)
    CONTINUE        reduce using rule 177 (statement -> expression_statement .)
    BREAK           reduce using rule 177 (statement -> expression_statement .)
    RETURN          reduce using rule 177 (statement -> expression_statement .)
    INCREMENT       reduce using rule 177 (statement -> expression_statement .)
    DECREMENT       reduce using rule 177 (statement -> expression_statement .)
    SIZEOF          reduce using rule 177 (statement -> expression_statement .)
    MODULO          reduce using rule 177 (statement -> expression_statement .)
    TIMES           reduce using rule 177 (statement -> expression_statement .)
    PLUS            reduce using rule 177 (statement -> expression_statement .)
    MINUS           reduce using rule 177 (statement -> expression_statement .)
    NOT             reduce using rule 177 (statement -> expression_statement .)
    LNOT            reduce using rule 177 (statement -> expression_statement .)
    STRING          reduce using rule 177 (statement -> expression_statement .)
    INTEGER         reduce using rule 177 (statement -> expression_statement .)
    CHARACTER       reduce using rule 177 (statement -> expression_statement .)
    FLOAT           reduce using rule 177 (statement -> expression_statement .)
    LPAREN          reduce using rule 177 (statement -> expression_statement .)
    ELSE            reduce using rule 177 (statement -> expression_statement .)


state 68

    (178) statement -> selection_statement .

    RBRACE          reduce using rule 178 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 178 (statement -> selection_statement .)
    CASE            reduce using rule 178 (statement -> selection_statement .)
    DEFAULT         reduce using rule 178 (statement -> selection_statement .)
    LBRACE          reduce using rule 178 (statement -> selection_statement .)
    SEMI            reduce using rule 178 (statement -> selection_statement .)
    IF              reduce using rule 178 (statement -> selection_statement .)
    SWITCH          reduce using rule 178 (statement -> selection_statement .)
    WHILE           reduce using rule 178 (statement -> selection_statement .)
    DO              reduce using rule 178 (statement -> selection_statement .)
    FOR             reduce using rule 178 (statement -> selection_statement .)
    GOTO            reduce using rule 178 (statement -> selection_statement .)
    CONTINUE        reduce using rule 178 (statement -> selection_statement .)
    BREAK           reduce using rule 178 (statement -> selection_statement .)
    RETURN          reduce using rule 178 (statement -> selection_statement .)
    INCREMENT       reduce using rule 178 (statement -> selection_statement .)
    DECREMENT       reduce using rule 178 (statement -> selection_statement .)
    SIZEOF          reduce using rule 178 (statement -> selection_statement .)
    MODULO          reduce using rule 178 (statement -> selection_statement .)
    TIMES           reduce using rule 178 (statement -> selection_statement .)
    PLUS            reduce using rule 178 (statement -> selection_statement .)
    MINUS           reduce using rule 178 (statement -> selection_statement .)
    NOT             reduce using rule 178 (statement -> selection_statement .)
    LNOT            reduce using rule 178 (statement -> selection_statement .)
    STRING          reduce using rule 178 (statement -> selection_statement .)
    INTEGER         reduce using rule 178 (statement -> selection_statement .)
    CHARACTER       reduce using rule 178 (statement -> selection_statement .)
    FLOAT           reduce using rule 178 (statement -> selection_statement .)
    LPAREN          reduce using rule 178 (statement -> selection_statement .)
    ELSE            reduce using rule 178 (statement -> selection_statement .)


state 69

    (179) statement -> iteration_statement .

    RBRACE          reduce using rule 179 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 179 (statement -> iteration_statement .)
    CASE            reduce using rule 179 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 179 (statement -> iteration_statement .)
    LBRACE          reduce using rule 179 (statement -> iteration_statement .)
    SEMI            reduce using rule 179 (statement -> iteration_statement .)
    IF              reduce using rule 179 (statement -> iteration_statement .)
    SWITCH          reduce using rule 179 (statement -> iteration_statement .)
    WHILE           reduce using rule 179 (statement -> iteration_statement .)
    DO              reduce using rule 179 (statement -> iteration_statement .)
    FOR             reduce using rule 179 (statement -> iteration_statement .)
    GOTO            reduce using rule 179 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 179 (statement -> iteration_statement .)
    BREAK           reduce using rule 179 (statement -> iteration_statement .)
    RETURN          reduce using rule 179 (statement -> iteration_statement .)
    INCREMENT       reduce using rule 179 (statement -> iteration_statement .)
    DECREMENT       reduce using rule 179 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 179 (statement -> iteration_statement .)
    MODULO          reduce using rule 179 (statement -> iteration_statement .)
    TIMES           reduce using rule 179 (statement -> iteration_statement .)
    PLUS            reduce using rule 179 (statement -> iteration_statement .)
    MINUS           reduce using rule 179 (statement -> iteration_statement .)
    NOT             reduce using rule 179 (statement -> iteration_statement .)
    LNOT            reduce using rule 179 (statement -> iteration_statement .)
    STRING          reduce using rule 179 (statement -> iteration_statement .)
    INTEGER         reduce using rule 179 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 179 (statement -> iteration_statement .)
    FLOAT           reduce using rule 179 (statement -> iteration_statement .)
    LPAREN          reduce using rule 179 (statement -> iteration_statement .)
    ELSE            reduce using rule 179 (statement -> iteration_statement .)


state 70

    (180) statement -> jump_statement .

    RBRACE          reduce using rule 180 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 180 (statement -> jump_statement .)
    CASE            reduce using rule 180 (statement -> jump_statement .)
    DEFAULT         reduce using rule 180 (statement -> jump_statement .)
    LBRACE          reduce using rule 180 (statement -> jump_statement .)
    SEMI            reduce using rule 180 (statement -> jump_statement .)
    IF              reduce using rule 180 (statement -> jump_statement .)
    SWITCH          reduce using rule 180 (statement -> jump_statement .)
    WHILE           reduce using rule 180 (statement -> jump_statement .)
    DO              reduce using rule 180 (statement -> jump_statement .)
    FOR             reduce using rule 180 (statement -> jump_statement .)
    GOTO            reduce using rule 180 (statement -> jump_statement .)
    CONTINUE        reduce using rule 180 (statement -> jump_statement .)
    BREAK           reduce using rule 180 (statement -> jump_statement .)
    RETURN          reduce using rule 180 (statement -> jump_statement .)
    INCREMENT       reduce using rule 180 (statement -> jump_statement .)
    DECREMENT       reduce using rule 180 (statement -> jump_statement .)
    SIZEOF          reduce using rule 180 (statement -> jump_statement .)
    MODULO          reduce using rule 180 (statement -> jump_statement .)
    TIMES           reduce using rule 180 (statement -> jump_statement .)
    PLUS            reduce using rule 180 (statement -> jump_statement .)
    MINUS           reduce using rule 180 (statement -> jump_statement .)
    NOT             reduce using rule 180 (statement -> jump_statement .)
    LNOT            reduce using rule 180 (statement -> jump_statement .)
    STRING          reduce using rule 180 (statement -> jump_statement .)
    INTEGER         reduce using rule 180 (statement -> jump_statement .)
    CHARACTER       reduce using rule 180 (statement -> jump_statement .)
    FLOAT           reduce using rule 180 (statement -> jump_statement .)
    LPAREN          reduce using rule 180 (statement -> jump_statement .)
    ELSE            reduce using rule 180 (statement -> jump_statement .)


state 71

    (192) expression_statement -> SEMI .

    RBRACE          reduce using rule 192 (expression_statement -> SEMI .)
    IDENTIFIER      reduce using rule 192 (expression_statement -> SEMI .)
    CASE            reduce using rule 192 (expression_statement -> SEMI .)
    DEFAULT         reduce using rule 192 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 192 (expression_statement -> SEMI .)
    SEMI            reduce using rule 192 (expression_statement -> SEMI .)
    IF              reduce using rule 192 (expression_statement -> SEMI .)
    SWITCH          reduce using rule 192 (expression_statement -> SEMI .)
    WHILE           reduce using rule 192 (expression_statement -> SEMI .)
    DO              reduce using rule 192 (expression_statement -> SEMI .)
    FOR             reduce using rule 192 (expression_statement -> SEMI .)
    GOTO            reduce using rule 192 (expression_statement -> SEMI .)
    CONTINUE        reduce using rule 192 (expression_statement -> SEMI .)
    BREAK           reduce using rule 192 (expression_statement -> SEMI .)
    RETURN          reduce using rule 192 (expression_statement -> SEMI .)
    INCREMENT       reduce using rule 192 (expression_statement -> SEMI .)
    DECREMENT       reduce using rule 192 (expression_statement -> SEMI .)
    SIZEOF          reduce using rule 192 (expression_statement -> SEMI .)
    MODULO          reduce using rule 192 (expression_statement -> SEMI .)
    TIMES           reduce using rule 192 (expression_statement -> SEMI .)
    PLUS            reduce using rule 192 (expression_statement -> SEMI .)
    MINUS           reduce using rule 192 (expression_statement -> SEMI .)
    NOT             reduce using rule 192 (expression_statement -> SEMI .)
    LNOT            reduce using rule 192 (expression_statement -> SEMI .)
    STRING          reduce using rule 192 (expression_statement -> SEMI .)
    INTEGER         reduce using rule 192 (expression_statement -> SEMI .)
    CHARACTER       reduce using rule 192 (expression_statement -> SEMI .)
    FLOAT           reduce using rule 192 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 192 (expression_statement -> SEMI .)
    ELSE            reduce using rule 192 (expression_statement -> SEMI .)
    RPAREN          reduce using rule 192 (expression_statement -> SEMI .)


state 72

    (181) labeled_statement -> IDENTIFIER . COLON statement
    (9) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 153
    LBRACKET        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LPAREN          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    PERIOD          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 9 (primary_expression -> IDENTIFIER .)
    INCREMENT       reduce using rule 9 (primary_expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 9 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 9 (primary_expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 9 (primary_expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 9 (primary_expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 9 (primary_expression -> IDENTIFIER .)
    ANDEQUAL        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    XOREQUAL        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    OREQUAL         reduce using rule 9 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 9 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    MODULO          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 9 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LE              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    GE              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    NE              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 9 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 9 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LAND            reduce using rule 9 (primary_expression -> IDENTIFIER .)
    TERNARY         reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LOR             reduce using rule 9 (primary_expression -> IDENTIFIER .)
    SEMI            reduce using rule 9 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 9 (primary_expression -> IDENTIFIER .)


state 73

    (182) labeled_statement -> CASE . constant_expression COLON statement
    (84) constant_expression -> . conditional_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    constant_expression            shift and go to state 154
    conditional_expression         shift and go to state 119
    logical_or_expression          shift and go to state 90
    logical_and_expression         shift and go to state 97
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 74

    (183) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 155


state 75

    (193) expression_statement -> expression . SEMI
    (83) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 156
    COMMA           shift and go to state 157


state 76

    (194) selection_statement -> IF . LPAREN expression RPAREN statement
    (195) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 158


state 77

    (14) primary_expression -> LPAREN . expression RPAREN
    (38) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (156) type_name -> . specifier_qualifier_list
    (157) type_name -> . specifier_qualifier_list abstract_declarator
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (119) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_specifier
    (121) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_qualifier
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 87
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    ENUM            shift and go to state 28
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    LPAREN          shift and go to state 77
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    expression                     shift and go to state 159
    type_name                      shift and go to state 160
    cast_expression                shift and go to state 95
    assignment_expression          shift and go to state 86
    specifier_qualifier_list       shift and go to state 161
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    type_specifier                 shift and go to state 138
    type_qualifier                 shift and go to state 139
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    struct_or_union                shift and go to state 27
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 78

    (196) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 162


state 79

    (197) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 163


state 80

    (198) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    statement                      shift and go to state 164
    expression                     shift and go to state 75
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 81

    (199) iteration_statement -> FOR . LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 165


state 82

    (201) jump_statement -> GOTO . IDENTIFIER SEMI

    IDENTIFIER      shift and go to state 166


state 83

    (202) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 167


state 84

    (203) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 168


state 85

    (204) jump_statement -> RETURN . SEMI
    (205) jump_statement -> RETURN . expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 169
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 170
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 86

    (82) expression -> assignment_expression .

    SEMI            reduce using rule 82 (expression -> assignment_expression .)
    COMMA           reduce using rule 82 (expression -> assignment_expression .)
    RPAREN          reduce using rule 82 (expression -> assignment_expression .)
    COLON           reduce using rule 82 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 82 (expression -> assignment_expression .)


state 87

    (100) type_specifier -> FLOAT .
    (13) primary_expression -> FLOAT .

  ! reduce/reduce conflict for LBRACKET resolved using rule 13 (primary_expression -> FLOAT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 13 (primary_expression -> FLOAT .)
  ! reduce/reduce conflict for TIMES resolved using rule 13 (primary_expression -> FLOAT .)
  ! reduce/reduce conflict for SEMI resolved using rule 13 (primary_expression -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 13 (primary_expression -> FLOAT .)
    VOID            reduce using rule 100 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 100 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 100 (type_specifier -> FLOAT .)
    INT             reduce using rule 100 (type_specifier -> FLOAT .)
    LONG            reduce using rule 100 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 100 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 100 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 100 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 100 (type_specifier -> FLOAT .)
    CONST           reduce using rule 100 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 100 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 100 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 100 (type_specifier -> FLOAT .)
    UNION           reduce using rule 100 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 100 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 13 (primary_expression -> FLOAT .)
    LPAREN          reduce using rule 13 (primary_expression -> FLOAT .)
    PERIOD          reduce using rule 13 (primary_expression -> FLOAT .)
    ARROW           reduce using rule 13 (primary_expression -> FLOAT .)
    INCREMENT       reduce using rule 13 (primary_expression -> FLOAT .)
    DECREMENT       reduce using rule 13 (primary_expression -> FLOAT .)
    EQUALS          reduce using rule 13 (primary_expression -> FLOAT .)
    TIMESEQUAL      reduce using rule 13 (primary_expression -> FLOAT .)
    DIVEQUAL        reduce using rule 13 (primary_expression -> FLOAT .)
    MODEQUAL        reduce using rule 13 (primary_expression -> FLOAT .)
    PLUSEQUAL       reduce using rule 13 (primary_expression -> FLOAT .)
    MINUSEQUAL      reduce using rule 13 (primary_expression -> FLOAT .)
    LSHIFTEQUAL     reduce using rule 13 (primary_expression -> FLOAT .)
    RSHIFTEQUAL     reduce using rule 13 (primary_expression -> FLOAT .)
    ANDEQUAL        reduce using rule 13 (primary_expression -> FLOAT .)
    XOREQUAL        reduce using rule 13 (primary_expression -> FLOAT .)
    OREQUAL         reduce using rule 13 (primary_expression -> FLOAT .)
    TIMES           reduce using rule 13 (primary_expression -> FLOAT .)
    DIVIDE          reduce using rule 13 (primary_expression -> FLOAT .)
    MODULO          reduce using rule 13 (primary_expression -> FLOAT .)
    PLUS            reduce using rule 13 (primary_expression -> FLOAT .)
    MINUS           reduce using rule 13 (primary_expression -> FLOAT .)
    LSHIFT          reduce using rule 13 (primary_expression -> FLOAT .)
    RSHIFT          reduce using rule 13 (primary_expression -> FLOAT .)
    LT              reduce using rule 13 (primary_expression -> FLOAT .)
    GT              reduce using rule 13 (primary_expression -> FLOAT .)
    LE              reduce using rule 13 (primary_expression -> FLOAT .)
    GE              reduce using rule 13 (primary_expression -> FLOAT .)
    EQ              reduce using rule 13 (primary_expression -> FLOAT .)
    NE              reduce using rule 13 (primary_expression -> FLOAT .)
    AND             reduce using rule 13 (primary_expression -> FLOAT .)
    XOR             reduce using rule 13 (primary_expression -> FLOAT .)
    OR              reduce using rule 13 (primary_expression -> FLOAT .)
    LAND            reduce using rule 13 (primary_expression -> FLOAT .)
    TERNARY         reduce using rule 13 (primary_expression -> FLOAT .)
    LOR             reduce using rule 13 (primary_expression -> FLOAT .)
    SEMI            reduce using rule 13 (primary_expression -> FLOAT .)
    COMMA           reduce using rule 13 (primary_expression -> FLOAT .)
    RPAREN          reduce using rule 13 (primary_expression -> FLOAT .)

  ! SEMI            [ reduce using rule 100 (type_specifier -> FLOAT .) ]
  ! TIMES           [ reduce using rule 100 (type_specifier -> FLOAT .) ]
  ! LPAREN          [ reduce using rule 100 (type_specifier -> FLOAT .) ]
  ! LBRACKET        [ reduce using rule 100 (type_specifier -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 100 (type_specifier -> FLOAT .) ]


state 88

    (69) assignment_expression -> conditional_expression .

    SEMI            reduce using rule 69 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 69 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 69 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 69 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 69 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 69 (assignment_expression -> conditional_expression .)


state 89

    (70) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (37) cast_expression -> unary_expression .
    (71) assignment_operator -> . EQUALS
    (72) assignment_operator -> . TIMESEQUAL
    (73) assignment_operator -> . DIVEQUAL
    (74) assignment_operator -> . MODEQUAL
    (75) assignment_operator -> . PLUSEQUAL
    (76) assignment_operator -> . MINUSEQUAL
    (77) assignment_operator -> . LSHIFTEQUAL
    (78) assignment_operator -> . RSHIFTEQUAL
    (79) assignment_operator -> . ANDEQUAL
    (80) assignment_operator -> . XOREQUAL
    (81) assignment_operator -> . OREQUAL

    TIMES           reduce using rule 37 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 37 (cast_expression -> unary_expression .)
    MODULO          reduce using rule 37 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 37 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 37 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 37 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 37 (cast_expression -> unary_expression .)
    LT              reduce using rule 37 (cast_expression -> unary_expression .)
    GT              reduce using rule 37 (cast_expression -> unary_expression .)
    LE              reduce using rule 37 (cast_expression -> unary_expression .)
    GE              reduce using rule 37 (cast_expression -> unary_expression .)
    EQ              reduce using rule 37 (cast_expression -> unary_expression .)
    NE              reduce using rule 37 (cast_expression -> unary_expression .)
    AND             reduce using rule 37 (cast_expression -> unary_expression .)
    XOR             reduce using rule 37 (cast_expression -> unary_expression .)
    OR              reduce using rule 37 (cast_expression -> unary_expression .)
    LAND            reduce using rule 37 (cast_expression -> unary_expression .)
    TERNARY         reduce using rule 37 (cast_expression -> unary_expression .)
    LOR             reduce using rule 37 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 37 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 37 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 37 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 37 (cast_expression -> unary_expression .)
    COLON           reduce using rule 37 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 37 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 172
    TIMESEQUAL      shift and go to state 173
    DIVEQUAL        shift and go to state 174
    MODEQUAL        shift and go to state 175
    PLUSEQUAL       shift and go to state 176
    MINUSEQUAL      shift and go to state 177
    LSHIFTEQUAL     shift and go to state 178
    RSHIFTEQUAL     shift and go to state 179
    ANDEQUAL        shift and go to state 180
    XOREQUAL        shift and go to state 181
    OREQUAL         shift and go to state 182

    assignment_operator            shift and go to state 171

state 90

    (67) conditional_expression -> logical_or_expression .
    (68) conditional_expression -> logical_or_expression . TERNARY expression COLON conditional_expression
    (66) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    SEMI            reduce using rule 67 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 67 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 67 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 67 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 67 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 67 (conditional_expression -> logical_or_expression .)
    TERNARY         shift and go to state 183
    LOR             shift and go to state 184


state 91

    (25) unary_expression -> postfix_expression .
    (16) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (17) postfix_expression -> postfix_expression . LPAREN RPAREN
    (18) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> postfix_expression . PERIOD IDENTIFIER
    (20) postfix_expression -> postfix_expression . ARROW IDENTIFIER
    (21) postfix_expression -> postfix_expression . INCREMENT
    (22) postfix_expression -> postfix_expression . DECREMENT

    EQUALS          reduce using rule 25 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 25 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 25 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 25 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 25 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 25 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 25 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 25 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 25 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 25 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 25 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 25 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 25 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 25 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 25 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 25 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 25 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 25 (unary_expression -> postfix_expression .)
    LT              reduce using rule 25 (unary_expression -> postfix_expression .)
    GT              reduce using rule 25 (unary_expression -> postfix_expression .)
    LE              reduce using rule 25 (unary_expression -> postfix_expression .)
    GE              reduce using rule 25 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 25 (unary_expression -> postfix_expression .)
    NE              reduce using rule 25 (unary_expression -> postfix_expression .)
    AND             reduce using rule 25 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 25 (unary_expression -> postfix_expression .)
    OR              reduce using rule 25 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 25 (unary_expression -> postfix_expression .)
    TERNARY         reduce using rule 25 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 25 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 25 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 25 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 25 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 25 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 25 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 25 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 185
    LPAREN          shift and go to state 186
    PERIOD          shift and go to state 187
    ARROW           shift and go to state 188
    INCREMENT       shift and go to state 189
    DECREMENT       shift and go to state 190


state 92

    (26) unary_expression -> INCREMENT . unary_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 192

    unary_expression               shift and go to state 191
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 93

    (27) unary_expression -> DECREMENT . unary_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 192

    unary_expression               shift and go to state 193
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 94

    (28) unary_expression -> unary_operator . cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 194
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    primary_expression             shift and go to state 98

state 95

    (39) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 39 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    MODULO          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 39 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 39 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 39 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 39 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 39 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 39 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 39 (multiplicative_expression -> cast_expression .)
    NE              reduce using rule 39 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 39 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 39 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 39 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 39 (multiplicative_expression -> cast_expression .)
    TERNARY         reduce using rule 39 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 39 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 39 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 39 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 39 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 39 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 39 (multiplicative_expression -> cast_expression .)


state 96

    (29) unary_expression -> SIZEOF . unary_expression
    (30) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 196
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    unary_expression               shift and go to state 195
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 97

    (65) logical_or_expression -> logical_and_expression .
    (64) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    TERNARY         reduce using rule 65 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 65 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 65 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 65 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 65 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 65 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 65 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 65 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 197


state 98

    (15) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 15 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 15 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 15 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 15 (postfix_expression -> primary_expression .)
    INCREMENT       reduce using rule 15 (postfix_expression -> primary_expression .)
    DECREMENT       reduce using rule 15 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 15 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 15 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 15 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 15 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 15 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 15 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 15 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 15 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 15 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 15 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 15 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 15 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 15 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 15 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 15 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 15 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 15 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 15 (postfix_expression -> primary_expression .)
    LT              reduce using rule 15 (postfix_expression -> primary_expression .)
    GT              reduce using rule 15 (postfix_expression -> primary_expression .)
    LE              reduce using rule 15 (postfix_expression -> primary_expression .)
    GE              reduce using rule 15 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 15 (postfix_expression -> primary_expression .)
    NE              reduce using rule 15 (postfix_expression -> primary_expression .)
    AND             reduce using rule 15 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 15 (postfix_expression -> primary_expression .)
    OR              reduce using rule 15 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 15 (postfix_expression -> primary_expression .)
    TERNARY         reduce using rule 15 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 15 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 15 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 15 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 15 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 15 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 15 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 15 (postfix_expression -> primary_expression .)


state 99

    (31) unary_operator -> MODULO .

    LPAREN          reduce using rule 31 (unary_operator -> MODULO .)
    INCREMENT       reduce using rule 31 (unary_operator -> MODULO .)
    DECREMENT       reduce using rule 31 (unary_operator -> MODULO .)
    SIZEOF          reduce using rule 31 (unary_operator -> MODULO .)
    MODULO          reduce using rule 31 (unary_operator -> MODULO .)
    TIMES           reduce using rule 31 (unary_operator -> MODULO .)
    PLUS            reduce using rule 31 (unary_operator -> MODULO .)
    MINUS           reduce using rule 31 (unary_operator -> MODULO .)
    NOT             reduce using rule 31 (unary_operator -> MODULO .)
    LNOT            reduce using rule 31 (unary_operator -> MODULO .)
    IDENTIFIER      reduce using rule 31 (unary_operator -> MODULO .)
    STRING          reduce using rule 31 (unary_operator -> MODULO .)
    INTEGER         reduce using rule 31 (unary_operator -> MODULO .)
    CHARACTER       reduce using rule 31 (unary_operator -> MODULO .)
    FLOAT           reduce using rule 31 (unary_operator -> MODULO .)


state 100

    (32) unary_operator -> TIMES .

    LPAREN          reduce using rule 32 (unary_operator -> TIMES .)
    INCREMENT       reduce using rule 32 (unary_operator -> TIMES .)
    DECREMENT       reduce using rule 32 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 32 (unary_operator -> TIMES .)
    MODULO          reduce using rule 32 (unary_operator -> TIMES .)
    TIMES           reduce using rule 32 (unary_operator -> TIMES .)
    PLUS            reduce using rule 32 (unary_operator -> TIMES .)
    MINUS           reduce using rule 32 (unary_operator -> TIMES .)
    NOT             reduce using rule 32 (unary_operator -> TIMES .)
    LNOT            reduce using rule 32 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 32 (unary_operator -> TIMES .)
    STRING          reduce using rule 32 (unary_operator -> TIMES .)
    INTEGER         reduce using rule 32 (unary_operator -> TIMES .)
    CHARACTER       reduce using rule 32 (unary_operator -> TIMES .)
    FLOAT           reduce using rule 32 (unary_operator -> TIMES .)


state 101

    (33) unary_operator -> PLUS .

    LPAREN          reduce using rule 33 (unary_operator -> PLUS .)
    INCREMENT       reduce using rule 33 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 33 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 33 (unary_operator -> PLUS .)
    MODULO          reduce using rule 33 (unary_operator -> PLUS .)
    TIMES           reduce using rule 33 (unary_operator -> PLUS .)
    PLUS            reduce using rule 33 (unary_operator -> PLUS .)
    MINUS           reduce using rule 33 (unary_operator -> PLUS .)
    NOT             reduce using rule 33 (unary_operator -> PLUS .)
    LNOT            reduce using rule 33 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 33 (unary_operator -> PLUS .)
    STRING          reduce using rule 33 (unary_operator -> PLUS .)
    INTEGER         reduce using rule 33 (unary_operator -> PLUS .)
    CHARACTER       reduce using rule 33 (unary_operator -> PLUS .)
    FLOAT           reduce using rule 33 (unary_operator -> PLUS .)


state 102

    (34) unary_operator -> MINUS .

    LPAREN          reduce using rule 34 (unary_operator -> MINUS .)
    INCREMENT       reduce using rule 34 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 34 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 34 (unary_operator -> MINUS .)
    MODULO          reduce using rule 34 (unary_operator -> MINUS .)
    TIMES           reduce using rule 34 (unary_operator -> MINUS .)
    PLUS            reduce using rule 34 (unary_operator -> MINUS .)
    MINUS           reduce using rule 34 (unary_operator -> MINUS .)
    NOT             reduce using rule 34 (unary_operator -> MINUS .)
    LNOT            reduce using rule 34 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 34 (unary_operator -> MINUS .)
    STRING          reduce using rule 34 (unary_operator -> MINUS .)
    INTEGER         reduce using rule 34 (unary_operator -> MINUS .)
    CHARACTER       reduce using rule 34 (unary_operator -> MINUS .)
    FLOAT           reduce using rule 34 (unary_operator -> MINUS .)


state 103

    (35) unary_operator -> NOT .

    LPAREN          reduce using rule 35 (unary_operator -> NOT .)
    INCREMENT       reduce using rule 35 (unary_operator -> NOT .)
    DECREMENT       reduce using rule 35 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 35 (unary_operator -> NOT .)
    MODULO          reduce using rule 35 (unary_operator -> NOT .)
    TIMES           reduce using rule 35 (unary_operator -> NOT .)
    PLUS            reduce using rule 35 (unary_operator -> NOT .)
    MINUS           reduce using rule 35 (unary_operator -> NOT .)
    NOT             reduce using rule 35 (unary_operator -> NOT .)
    LNOT            reduce using rule 35 (unary_operator -> NOT .)
    IDENTIFIER      reduce using rule 35 (unary_operator -> NOT .)
    STRING          reduce using rule 35 (unary_operator -> NOT .)
    INTEGER         reduce using rule 35 (unary_operator -> NOT .)
    CHARACTER       reduce using rule 35 (unary_operator -> NOT .)
    FLOAT           reduce using rule 35 (unary_operator -> NOT .)


state 104

    (36) unary_operator -> LNOT .

    LPAREN          reduce using rule 36 (unary_operator -> LNOT .)
    INCREMENT       reduce using rule 36 (unary_operator -> LNOT .)
    DECREMENT       reduce using rule 36 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 36 (unary_operator -> LNOT .)
    MODULO          reduce using rule 36 (unary_operator -> LNOT .)
    TIMES           reduce using rule 36 (unary_operator -> LNOT .)
    PLUS            reduce using rule 36 (unary_operator -> LNOT .)
    MINUS           reduce using rule 36 (unary_operator -> LNOT .)
    NOT             reduce using rule 36 (unary_operator -> LNOT .)
    LNOT            reduce using rule 36 (unary_operator -> LNOT .)
    IDENTIFIER      reduce using rule 36 (unary_operator -> LNOT .)
    STRING          reduce using rule 36 (unary_operator -> LNOT .)
    INTEGER         reduce using rule 36 (unary_operator -> LNOT .)
    CHARACTER       reduce using rule 36 (unary_operator -> LNOT .)
    FLOAT           reduce using rule 36 (unary_operator -> LNOT .)


state 105

    (63) logical_and_expression -> inclusive_or_expression .
    (62) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 63 (logical_and_expression -> inclusive_or_expression .)
    TERNARY         reduce using rule 63 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 63 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 63 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 63 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 63 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 63 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 63 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 63 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 198


state 106

    (10) primary_expression -> STRING .

    LBRACKET        reduce using rule 10 (primary_expression -> STRING .)
    LPAREN          reduce using rule 10 (primary_expression -> STRING .)
    PERIOD          reduce using rule 10 (primary_expression -> STRING .)
    ARROW           reduce using rule 10 (primary_expression -> STRING .)
    INCREMENT       reduce using rule 10 (primary_expression -> STRING .)
    DECREMENT       reduce using rule 10 (primary_expression -> STRING .)
    EQUALS          reduce using rule 10 (primary_expression -> STRING .)
    TIMESEQUAL      reduce using rule 10 (primary_expression -> STRING .)
    DIVEQUAL        reduce using rule 10 (primary_expression -> STRING .)
    MODEQUAL        reduce using rule 10 (primary_expression -> STRING .)
    PLUSEQUAL       reduce using rule 10 (primary_expression -> STRING .)
    MINUSEQUAL      reduce using rule 10 (primary_expression -> STRING .)
    LSHIFTEQUAL     reduce using rule 10 (primary_expression -> STRING .)
    RSHIFTEQUAL     reduce using rule 10 (primary_expression -> STRING .)
    ANDEQUAL        reduce using rule 10 (primary_expression -> STRING .)
    XOREQUAL        reduce using rule 10 (primary_expression -> STRING .)
    OREQUAL         reduce using rule 10 (primary_expression -> STRING .)
    TIMES           reduce using rule 10 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 10 (primary_expression -> STRING .)
    MODULO          reduce using rule 10 (primary_expression -> STRING .)
    PLUS            reduce using rule 10 (primary_expression -> STRING .)
    MINUS           reduce using rule 10 (primary_expression -> STRING .)
    LSHIFT          reduce using rule 10 (primary_expression -> STRING .)
    RSHIFT          reduce using rule 10 (primary_expression -> STRING .)
    LT              reduce using rule 10 (primary_expression -> STRING .)
    GT              reduce using rule 10 (primary_expression -> STRING .)
    LE              reduce using rule 10 (primary_expression -> STRING .)
    GE              reduce using rule 10 (primary_expression -> STRING .)
    EQ              reduce using rule 10 (primary_expression -> STRING .)
    NE              reduce using rule 10 (primary_expression -> STRING .)
    AND             reduce using rule 10 (primary_expression -> STRING .)
    XOR             reduce using rule 10 (primary_expression -> STRING .)
    OR              reduce using rule 10 (primary_expression -> STRING .)
    LAND            reduce using rule 10 (primary_expression -> STRING .)
    TERNARY         reduce using rule 10 (primary_expression -> STRING .)
    LOR             reduce using rule 10 (primary_expression -> STRING .)
    SEMI            reduce using rule 10 (primary_expression -> STRING .)
    COMMA           reduce using rule 10 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 10 (primary_expression -> STRING .)
    COLON           reduce using rule 10 (primary_expression -> STRING .)
    RPAREN          reduce using rule 10 (primary_expression -> STRING .)
    RBRACE          reduce using rule 10 (primary_expression -> STRING .)


state 107

    (11) primary_expression -> INTEGER .

    LBRACKET        reduce using rule 11 (primary_expression -> INTEGER .)
    LPAREN          reduce using rule 11 (primary_expression -> INTEGER .)
    PERIOD          reduce using rule 11 (primary_expression -> INTEGER .)
    ARROW           reduce using rule 11 (primary_expression -> INTEGER .)
    INCREMENT       reduce using rule 11 (primary_expression -> INTEGER .)
    DECREMENT       reduce using rule 11 (primary_expression -> INTEGER .)
    EQUALS          reduce using rule 11 (primary_expression -> INTEGER .)
    TIMESEQUAL      reduce using rule 11 (primary_expression -> INTEGER .)
    DIVEQUAL        reduce using rule 11 (primary_expression -> INTEGER .)
    MODEQUAL        reduce using rule 11 (primary_expression -> INTEGER .)
    PLUSEQUAL       reduce using rule 11 (primary_expression -> INTEGER .)
    MINUSEQUAL      reduce using rule 11 (primary_expression -> INTEGER .)
    LSHIFTEQUAL     reduce using rule 11 (primary_expression -> INTEGER .)
    RSHIFTEQUAL     reduce using rule 11 (primary_expression -> INTEGER .)
    ANDEQUAL        reduce using rule 11 (primary_expression -> INTEGER .)
    XOREQUAL        reduce using rule 11 (primary_expression -> INTEGER .)
    OREQUAL         reduce using rule 11 (primary_expression -> INTEGER .)
    TIMES           reduce using rule 11 (primary_expression -> INTEGER .)
    DIVIDE          reduce using rule 11 (primary_expression -> INTEGER .)
    MODULO          reduce using rule 11 (primary_expression -> INTEGER .)
    PLUS            reduce using rule 11 (primary_expression -> INTEGER .)
    MINUS           reduce using rule 11 (primary_expression -> INTEGER .)
    LSHIFT          reduce using rule 11 (primary_expression -> INTEGER .)
    RSHIFT          reduce using rule 11 (primary_expression -> INTEGER .)
    LT              reduce using rule 11 (primary_expression -> INTEGER .)
    GT              reduce using rule 11 (primary_expression -> INTEGER .)
    LE              reduce using rule 11 (primary_expression -> INTEGER .)
    GE              reduce using rule 11 (primary_expression -> INTEGER .)
    EQ              reduce using rule 11 (primary_expression -> INTEGER .)
    NE              reduce using rule 11 (primary_expression -> INTEGER .)
    AND             reduce using rule 11 (primary_expression -> INTEGER .)
    XOR             reduce using rule 11 (primary_expression -> INTEGER .)
    OR              reduce using rule 11 (primary_expression -> INTEGER .)
    LAND            reduce using rule 11 (primary_expression -> INTEGER .)
    TERNARY         reduce using rule 11 (primary_expression -> INTEGER .)
    LOR             reduce using rule 11 (primary_expression -> INTEGER .)
    SEMI            reduce using rule 11 (primary_expression -> INTEGER .)
    COMMA           reduce using rule 11 (primary_expression -> INTEGER .)
    RBRACKET        reduce using rule 11 (primary_expression -> INTEGER .)
    COLON           reduce using rule 11 (primary_expression -> INTEGER .)
    RPAREN          reduce using rule 11 (primary_expression -> INTEGER .)
    RBRACE          reduce using rule 11 (primary_expression -> INTEGER .)


state 108

    (12) primary_expression -> CHARACTER .

    LBRACKET        reduce using rule 12 (primary_expression -> CHARACTER .)
    LPAREN          reduce using rule 12 (primary_expression -> CHARACTER .)
    PERIOD          reduce using rule 12 (primary_expression -> CHARACTER .)
    ARROW           reduce using rule 12 (primary_expression -> CHARACTER .)
    INCREMENT       reduce using rule 12 (primary_expression -> CHARACTER .)
    DECREMENT       reduce using rule 12 (primary_expression -> CHARACTER .)
    EQUALS          reduce using rule 12 (primary_expression -> CHARACTER .)
    TIMESEQUAL      reduce using rule 12 (primary_expression -> CHARACTER .)
    DIVEQUAL        reduce using rule 12 (primary_expression -> CHARACTER .)
    MODEQUAL        reduce using rule 12 (primary_expression -> CHARACTER .)
    PLUSEQUAL       reduce using rule 12 (primary_expression -> CHARACTER .)
    MINUSEQUAL      reduce using rule 12 (primary_expression -> CHARACTER .)
    LSHIFTEQUAL     reduce using rule 12 (primary_expression -> CHARACTER .)
    RSHIFTEQUAL     reduce using rule 12 (primary_expression -> CHARACTER .)
    ANDEQUAL        reduce using rule 12 (primary_expression -> CHARACTER .)
    XOREQUAL        reduce using rule 12 (primary_expression -> CHARACTER .)
    OREQUAL         reduce using rule 12 (primary_expression -> CHARACTER .)
    TIMES           reduce using rule 12 (primary_expression -> CHARACTER .)
    DIVIDE          reduce using rule 12 (primary_expression -> CHARACTER .)
    MODULO          reduce using rule 12 (primary_expression -> CHARACTER .)
    PLUS            reduce using rule 12 (primary_expression -> CHARACTER .)
    MINUS           reduce using rule 12 (primary_expression -> CHARACTER .)
    LSHIFT          reduce using rule 12 (primary_expression -> CHARACTER .)
    RSHIFT          reduce using rule 12 (primary_expression -> CHARACTER .)
    LT              reduce using rule 12 (primary_expression -> CHARACTER .)
    GT              reduce using rule 12 (primary_expression -> CHARACTER .)
    LE              reduce using rule 12 (primary_expression -> CHARACTER .)
    GE              reduce using rule 12 (primary_expression -> CHARACTER .)
    EQ              reduce using rule 12 (primary_expression -> CHARACTER .)
    NE              reduce using rule 12 (primary_expression -> CHARACTER .)
    AND             reduce using rule 12 (primary_expression -> CHARACTER .)
    XOR             reduce using rule 12 (primary_expression -> CHARACTER .)
    OR              reduce using rule 12 (primary_expression -> CHARACTER .)
    LAND            reduce using rule 12 (primary_expression -> CHARACTER .)
    TERNARY         reduce using rule 12 (primary_expression -> CHARACTER .)
    LOR             reduce using rule 12 (primary_expression -> CHARACTER .)
    SEMI            reduce using rule 12 (primary_expression -> CHARACTER .)
    COMMA           reduce using rule 12 (primary_expression -> CHARACTER .)
    RBRACKET        reduce using rule 12 (primary_expression -> CHARACTER .)
    COLON           reduce using rule 12 (primary_expression -> CHARACTER .)
    RPAREN          reduce using rule 12 (primary_expression -> CHARACTER .)
    RBRACE          reduce using rule 12 (primary_expression -> CHARACTER .)


state 109

    (61) inclusive_or_expression -> exclusive_or_expression .
    (60) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 61 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 61 (inclusive_or_expression -> exclusive_or_expression .)
    TERNARY         reduce using rule 61 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 61 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 61 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 61 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 61 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 61 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 61 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 61 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 199


state 110

    (59) exclusive_or_expression -> and_expression .
    (58) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 59 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 59 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 59 (exclusive_or_expression -> and_expression .)
    TERNARY         reduce using rule 59 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 59 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 59 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 59 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 59 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 59 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 59 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 59 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 200


state 111

    (57) and_expression -> equality_expression .
    (55) equality_expression -> equality_expression . EQ relational_expression
    (56) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 57 (and_expression -> equality_expression .)
    XOR             reduce using rule 57 (and_expression -> equality_expression .)
    OR              reduce using rule 57 (and_expression -> equality_expression .)
    LAND            reduce using rule 57 (and_expression -> equality_expression .)
    TERNARY         reduce using rule 57 (and_expression -> equality_expression .)
    LOR             reduce using rule 57 (and_expression -> equality_expression .)
    SEMI            reduce using rule 57 (and_expression -> equality_expression .)
    COMMA           reduce using rule 57 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 57 (and_expression -> equality_expression .)
    COLON           reduce using rule 57 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 57 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 57 (and_expression -> equality_expression .)
    EQ              shift and go to state 201
    NE              shift and go to state 202


state 112

    (54) equality_expression -> relational_expression .
    (50) relational_expression -> relational_expression . LT shift_expression
    (51) relational_expression -> relational_expression . GT shift_expression
    (52) relational_expression -> relational_expression . LE shift_expression
    (53) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 54 (equality_expression -> relational_expression .)
    NE              reduce using rule 54 (equality_expression -> relational_expression .)
    AND             reduce using rule 54 (equality_expression -> relational_expression .)
    XOR             reduce using rule 54 (equality_expression -> relational_expression .)
    OR              reduce using rule 54 (equality_expression -> relational_expression .)
    LAND            reduce using rule 54 (equality_expression -> relational_expression .)
    TERNARY         reduce using rule 54 (equality_expression -> relational_expression .)
    LOR             reduce using rule 54 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 54 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 54 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 54 (equality_expression -> relational_expression .)
    COLON           reduce using rule 54 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 54 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 54 (equality_expression -> relational_expression .)
    LT              shift and go to state 203
    GT              shift and go to state 204
    LE              shift and go to state 205
    GE              shift and go to state 206


state 113

    (49) relational_expression -> shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 49 (relational_expression -> shift_expression .)
    GT              reduce using rule 49 (relational_expression -> shift_expression .)
    LE              reduce using rule 49 (relational_expression -> shift_expression .)
    GE              reduce using rule 49 (relational_expression -> shift_expression .)
    EQ              reduce using rule 49 (relational_expression -> shift_expression .)
    NE              reduce using rule 49 (relational_expression -> shift_expression .)
    AND             reduce using rule 49 (relational_expression -> shift_expression .)
    XOR             reduce using rule 49 (relational_expression -> shift_expression .)
    OR              reduce using rule 49 (relational_expression -> shift_expression .)
    LAND            reduce using rule 49 (relational_expression -> shift_expression .)
    TERNARY         reduce using rule 49 (relational_expression -> shift_expression .)
    LOR             reduce using rule 49 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 49 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 49 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 49 (relational_expression -> shift_expression .)
    COLON           reduce using rule 49 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 49 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 49 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 207
    RSHIFT          shift and go to state 208


state 114

    (46) shift_expression -> additive_expression .
    (44) additive_expression -> additive_expression . PLUS multiplicative_expression
    (45) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 46 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 46 (shift_expression -> additive_expression .)
    LT              reduce using rule 46 (shift_expression -> additive_expression .)
    GT              reduce using rule 46 (shift_expression -> additive_expression .)
    LE              reduce using rule 46 (shift_expression -> additive_expression .)
    GE              reduce using rule 46 (shift_expression -> additive_expression .)
    EQ              reduce using rule 46 (shift_expression -> additive_expression .)
    NE              reduce using rule 46 (shift_expression -> additive_expression .)
    AND             reduce using rule 46 (shift_expression -> additive_expression .)
    XOR             reduce using rule 46 (shift_expression -> additive_expression .)
    OR              reduce using rule 46 (shift_expression -> additive_expression .)
    LAND            reduce using rule 46 (shift_expression -> additive_expression .)
    TERNARY         reduce using rule 46 (shift_expression -> additive_expression .)
    LOR             reduce using rule 46 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 46 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 46 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 46 (shift_expression -> additive_expression .)
    COLON           reduce using rule 46 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 46 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 46 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 209
    MINUS           shift and go to state 210


state 115

    (43) additive_expression -> multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (42) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 43 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 43 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 43 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 43 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 43 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 43 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 43 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 43 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 43 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 43 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 43 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 43 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 43 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 43 (additive_expression -> multiplicative_expression .)
    TERNARY         reduce using rule 43 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 43 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 43 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 43 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 43 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 43 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 43 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 43 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 211
    DIVIDE          shift and go to state 212
    MODULO          shift and go to state 213


state 116

    (93) init_declarator -> declarator .
    (94) init_declarator -> declarator . EQUALS initializer

    SEMI            reduce using rule 93 (init_declarator -> declarator .)
    COMMA           reduce using rule 93 (init_declarator -> declarator .)
    EQUALS          shift and go to state 56


state 117

    (136) direct_declarator -> direct_declarator LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 214


state 118

    (137) direct_declarator -> direct_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LBRACE          reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    VOID            reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    CHAR            reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SHORT           reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    INT             reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LONG            reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    FLOAT           reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    DOUBLE          reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SIGNED          reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    UNSIGNED        reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    CONST           reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    VOLATILE        reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    ENUM            reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    STRUCT          reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    UNION           reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    EQUALS          reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SEMI            reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COLON           reduce using rule 137 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)


state 119

    (84) constant_expression -> conditional_expression .

    RBRACKET        reduce using rule 84 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 84 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 84 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 84 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 84 (constant_expression -> conditional_expression .)


state 120

    (37) cast_expression -> unary_expression .

    TIMES           reduce using rule 37 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 37 (cast_expression -> unary_expression .)
    MODULO          reduce using rule 37 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 37 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 37 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 37 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 37 (cast_expression -> unary_expression .)
    LT              reduce using rule 37 (cast_expression -> unary_expression .)
    GT              reduce using rule 37 (cast_expression -> unary_expression .)
    LE              reduce using rule 37 (cast_expression -> unary_expression .)
    GE              reduce using rule 37 (cast_expression -> unary_expression .)
    EQ              reduce using rule 37 (cast_expression -> unary_expression .)
    NE              reduce using rule 37 (cast_expression -> unary_expression .)
    AND             reduce using rule 37 (cast_expression -> unary_expression .)
    XOR             reduce using rule 37 (cast_expression -> unary_expression .)
    OR              reduce using rule 37 (cast_expression -> unary_expression .)
    LAND            reduce using rule 37 (cast_expression -> unary_expression .)
    TERNARY         reduce using rule 37 (cast_expression -> unary_expression .)
    LOR             reduce using rule 37 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 37 (cast_expression -> unary_expression .)
    COLON           reduce using rule 37 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 37 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 37 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 37 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 37 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 37 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 37 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 37 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 37 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 37 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 37 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 37 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 37 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 37 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 37 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 37 (cast_expression -> unary_expression .)


state 121

    (38) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (14) primary_expression -> LPAREN . expression RPAREN
    (156) type_name -> . specifier_qualifier_list
    (157) type_name -> . specifier_qualifier_list abstract_declarator
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (119) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_specifier
    (121) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_qualifier
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 87
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    ENUM            shift and go to state 28
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    LPAREN          shift and go to state 77

    type_name                      shift and go to state 160
    cast_expression                shift and go to state 95
    expression                     shift and go to state 159
    specifier_qualifier_list       shift and go to state 161
    assignment_expression          shift and go to state 86
    type_specifier                 shift and go to state 138
    type_qualifier                 shift and go to state 139
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    struct_or_union                shift and go to state 27
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 122

    (9) primary_expression -> IDENTIFIER .

    LBRACKET        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LPAREN          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    PERIOD          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 9 (primary_expression -> IDENTIFIER .)
    INCREMENT       reduce using rule 9 (primary_expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 9 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 9 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    MODULO          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 9 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LE              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    GE              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    NE              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 9 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 9 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LAND            reduce using rule 9 (primary_expression -> IDENTIFIER .)
    TERNARY         reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LOR             reduce using rule 9 (primary_expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 9 (primary_expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 9 (primary_expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 9 (primary_expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 9 (primary_expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 9 (primary_expression -> IDENTIFIER .)
    ANDEQUAL        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    XOREQUAL        reduce using rule 9 (primary_expression -> IDENTIFIER .)
    OREQUAL         reduce using rule 9 (primary_expression -> IDENTIFIER .)
    SEMI            reduce using rule 9 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 9 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 9 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 9 (primary_expression -> IDENTIFIER .)
    RBRACE          reduce using rule 9 (primary_expression -> IDENTIFIER .)


state 123

    (13) primary_expression -> FLOAT .

    LBRACKET        reduce using rule 13 (primary_expression -> FLOAT .)
    LPAREN          reduce using rule 13 (primary_expression -> FLOAT .)
    PERIOD          reduce using rule 13 (primary_expression -> FLOAT .)
    ARROW           reduce using rule 13 (primary_expression -> FLOAT .)
    INCREMENT       reduce using rule 13 (primary_expression -> FLOAT .)
    DECREMENT       reduce using rule 13 (primary_expression -> FLOAT .)
    TIMES           reduce using rule 13 (primary_expression -> FLOAT .)
    DIVIDE          reduce using rule 13 (primary_expression -> FLOAT .)
    MODULO          reduce using rule 13 (primary_expression -> FLOAT .)
    PLUS            reduce using rule 13 (primary_expression -> FLOAT .)
    MINUS           reduce using rule 13 (primary_expression -> FLOAT .)
    LSHIFT          reduce using rule 13 (primary_expression -> FLOAT .)
    RSHIFT          reduce using rule 13 (primary_expression -> FLOAT .)
    LT              reduce using rule 13 (primary_expression -> FLOAT .)
    GT              reduce using rule 13 (primary_expression -> FLOAT .)
    LE              reduce using rule 13 (primary_expression -> FLOAT .)
    GE              reduce using rule 13 (primary_expression -> FLOAT .)
    EQ              reduce using rule 13 (primary_expression -> FLOAT .)
    NE              reduce using rule 13 (primary_expression -> FLOAT .)
    AND             reduce using rule 13 (primary_expression -> FLOAT .)
    XOR             reduce using rule 13 (primary_expression -> FLOAT .)
    OR              reduce using rule 13 (primary_expression -> FLOAT .)
    LAND            reduce using rule 13 (primary_expression -> FLOAT .)
    TERNARY         reduce using rule 13 (primary_expression -> FLOAT .)
    LOR             reduce using rule 13 (primary_expression -> FLOAT .)
    RBRACKET        reduce using rule 13 (primary_expression -> FLOAT .)
    EQUALS          reduce using rule 13 (primary_expression -> FLOAT .)
    TIMESEQUAL      reduce using rule 13 (primary_expression -> FLOAT .)
    DIVEQUAL        reduce using rule 13 (primary_expression -> FLOAT .)
    MODEQUAL        reduce using rule 13 (primary_expression -> FLOAT .)
    PLUSEQUAL       reduce using rule 13 (primary_expression -> FLOAT .)
    MINUSEQUAL      reduce using rule 13 (primary_expression -> FLOAT .)
    LSHIFTEQUAL     reduce using rule 13 (primary_expression -> FLOAT .)
    RSHIFTEQUAL     reduce using rule 13 (primary_expression -> FLOAT .)
    ANDEQUAL        reduce using rule 13 (primary_expression -> FLOAT .)
    XOREQUAL        reduce using rule 13 (primary_expression -> FLOAT .)
    OREQUAL         reduce using rule 13 (primary_expression -> FLOAT .)
    SEMI            reduce using rule 13 (primary_expression -> FLOAT .)
    COMMA           reduce using rule 13 (primary_expression -> FLOAT .)
    COLON           reduce using rule 13 (primary_expression -> FLOAT .)
    RPAREN          reduce using rule 13 (primary_expression -> FLOAT .)
    RBRACE          reduce using rule 13 (primary_expression -> FLOAT .)


state 124

    (138) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 215


state 125

    (140) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LONG            reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CONST           reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ENUM            reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STRUCT          reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNION           reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMI            reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COLON           reduce using rule 140 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 126

    (139) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (155) identifier_list -> identifier_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 216
    COMMA           shift and go to state 217


state 127

    (147) parameter_type_list -> parameter_list .
    (148) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (150) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 147 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 218


state 128

    (154) identifier_list -> IDENTIFIER .

    RPAREN          reduce using rule 154 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 154 (identifier_list -> IDENTIFIER .)


state 129

    (149) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 149 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 149 (parameter_list -> parameter_declaration .)


state 130

    (151) parameter_declaration -> declaration_specifiers . declarator
    (152) parameter_declaration -> declaration_specifiers . abstract_declarator
    (153) parameter_declaration -> declaration_specifiers .
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (158) abstract_declarator -> . pointer
    (159) abstract_declarator -> . direct_abstract_declarator
    (160) abstract_declarator -> . pointer direct_abstract_declarator
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN
    (161) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (162) direct_abstract_declarator -> . LBRACKET RBRACKET
    (163) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (164) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (165) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (166) direct_abstract_declarator -> . LPAREN RPAREN
    (167) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (169) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 153 (parameter_declaration -> declaration_specifiers .)
    RPAREN          reduce using rule 153 (parameter_declaration -> declaration_specifiers .)
    TIMES           shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 223
    LBRACKET        shift and go to state 224

    declarator                     shift and go to state 219
    abstract_declarator            shift and go to state 220
    pointer                        shift and go to state 221
    direct_declarator              shift and go to state 10
    direct_abstract_declarator     shift and go to state 222

state 131

    (144) pointer -> TIMES type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 144 (pointer -> TIMES type_qualifier_list pointer .)
    LPAREN          reduce using rule 144 (pointer -> TIMES type_qualifier_list pointer .)
    LBRACKET        reduce using rule 144 (pointer -> TIMES type_qualifier_list pointer .)
    COMMA           reduce using rule 144 (pointer -> TIMES type_qualifier_list pointer .)
    RPAREN          reduce using rule 144 (pointer -> TIMES type_qualifier_list pointer .)


state 132

    (146) type_qualifier_list -> type_qualifier_list type_qualifier .

    TIMES           reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 133

    (135) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 135 (direct_declarator -> LPAREN declarator RPAREN .)


state 134

    (106) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE . struct_declaration_list RBRACE
    (112) struct_declaration_list -> . struct_declaration
    (113) struct_declaration_list -> . struct_declaration_list struct_declaration
    (111) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (119) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_specifier
    (121) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_qualifier
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    struct_or_union                shift and go to state 27
    struct_declaration_list        shift and go to state 225
    struct_declaration             shift and go to state 136
    specifier_qualifier_list       shift and go to state 137
    type_specifier                 shift and go to state 138
    type_qualifier                 shift and go to state 139
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21

state 135

    (107) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list . RBRACE
    (113) struct_declaration_list -> struct_declaration_list . struct_declaration
    (111) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (119) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_specifier
    (121) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_qualifier
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    RBRACE          shift and go to state 226
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    struct_or_union                shift and go to state 27
    struct_declaration             shift and go to state 227
    specifier_qualifier_list       shift and go to state 137
    type_specifier                 shift and go to state 138
    type_qualifier                 shift and go to state 139
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21

state 136

    (112) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 112 (struct_declaration_list -> struct_declaration .)


state 137

    (111) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI
    (114) struct_declarator_list -> . struct_declarator
    (115) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (116) struct_declarator -> . declarator
    (117) struct_declarator -> . COLON constant_expression
    (118) struct_declarator -> . declarator COLON constant_expression
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN

    COLON           shift and go to state 231
    TIMES           shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 26

    struct_declarator_list         shift and go to state 228
    struct_declarator              shift and go to state 229
    declarator                     shift and go to state 230
    pointer                        shift and go to state 9
    direct_declarator              shift and go to state 10

state 138

    (119) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (120) specifier_qualifier_list -> type_specifier .
    (119) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_specifier
    (121) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_qualifier
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    COLON           reduce using rule 120 (specifier_qualifier_list -> type_specifier .)
    TIMES           reduce using rule 120 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 120 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 120 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 120 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 120 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    type_specifier                 shift and go to state 138
    specifier_qualifier_list       shift and go to state 232
    type_qualifier                 shift and go to state 139
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 139

    (121) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (122) specifier_qualifier_list -> type_qualifier .
    (119) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_specifier
    (121) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_qualifier
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    COLON           reduce using rule 122 (specifier_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 122 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 122 (specifier_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 122 (specifier_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 122 (specifier_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 122 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    type_qualifier                 shift and go to state 139
    specifier_qualifier_list       shift and go to state 233
    type_specifier                 shift and go to state 138
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 140

    (123) enum_specifier -> ENUM LBRACE enumerator_list . RBRACE
    (127) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 234
    COMMA           shift and go to state 235


state 141

    (126) enumerator_list -> enumerator .

    RBRACE          reduce using rule 126 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 126 (enumerator_list -> enumerator .)


state 142

    (128) enumerator -> IDENTIFIER .
    (129) enumerator -> IDENTIFIER . EQUALS constant_expression

    RBRACE          reduce using rule 128 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 128 (enumerator -> IDENTIFIER .)
    EQUALS          shift and go to state 236


state 143

    (124) enum_specifier -> ENUM IDENTIFIER LBRACE . enumerator_list RBRACE
    (126) enumerator_list -> . enumerator
    (127) enumerator_list -> . enumerator_list COMMA enumerator
    (128) enumerator -> . IDENTIFIER
    (129) enumerator -> . IDENTIFIER EQUALS constant_expression

    IDENTIFIER      shift and go to state 142

    enumerator_list                shift and go to state 237
    enumerator                     shift and go to state 141

state 144

    (5) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    VOID            reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TIMES           reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 145

    (94) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 94 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 94 (init_declarator -> declarator EQUALS initializer .)


state 146

    (170) initializer -> assignment_expression .

    SEMI            reduce using rule 170 (initializer -> assignment_expression .)
    COMMA           reduce using rule 170 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 170 (initializer -> assignment_expression .)


state 147

    (171) initializer -> LBRACE . initializer_list RBRACE
    (172) initializer -> LBRACE . initializer_list COMMA RBRACE
    (173) initializer_list -> . initializer
    (174) initializer_list -> . initializer_list COMMA initializer
    (170) initializer -> . assignment_expression
    (171) initializer -> . LBRACE initializer_list RBRACE
    (172) initializer -> . LBRACE initializer_list COMMA RBRACE
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 147
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    initializer_list               shift and go to state 238
    initializer                    shift and go to state 239
    assignment_expression          shift and go to state 146
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 148

    (92) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 92 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 92 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 149

    (185) compound_statement -> LBRACE statement_list RBRACE .

    VOID            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    SHORT           reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    LONG            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    SIGNED          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    UNSIGNED        reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    CONST           reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    VOLATILE        reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    ENUM            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    STRUCT          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    UNION           reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    GOTO            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    INCREMENT       reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    DECREMENT       reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    SIZEOF          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    MODULO          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    INTEGER         reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    CHARACTER       reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 185 (compound_statement -> LBRACE statement_list RBRACE .)


state 150

    (191) statement_list -> statement_list statement .

    RBRACE          reduce using rule 191 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 191 (statement_list -> statement_list statement .)
    CASE            reduce using rule 191 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 191 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 191 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 191 (statement_list -> statement_list statement .)
    IF              reduce using rule 191 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 191 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 191 (statement_list -> statement_list statement .)
    DO              reduce using rule 191 (statement_list -> statement_list statement .)
    FOR             reduce using rule 191 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 191 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 191 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 191 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 191 (statement_list -> statement_list statement .)
    INCREMENT       reduce using rule 191 (statement_list -> statement_list statement .)
    DECREMENT       reduce using rule 191 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 191 (statement_list -> statement_list statement .)
    MODULO          reduce using rule 191 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 191 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 191 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 191 (statement_list -> statement_list statement .)
    NOT             reduce using rule 191 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 191 (statement_list -> statement_list statement .)
    STRING          reduce using rule 191 (statement_list -> statement_list statement .)
    INTEGER         reduce using rule 191 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 191 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 191 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 191 (statement_list -> statement_list statement .)


state 151

    (186) compound_statement -> LBRACE declaration_list RBRACE .

    VOID            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHAR            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    SHORT           reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    LONG            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    FLOAT           reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    DOUBLE          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    SIGNED          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    UNSIGNED        reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    CONST           reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOLATILE        reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    TIMES           reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    ENUM            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    STRUCT          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    UNION           reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    CASE            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    DEFAULT         reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    SEMI            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    SWITCH          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    DO              reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    GOTO            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    CONTINUE        reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    INCREMENT       reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    DECREMENT       reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    SIZEOF          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    MODULO          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUS            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    LNOT            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    STRING          reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    INTEGER         reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHARACTER       reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 186 (compound_statement -> LBRACE declaration_list RBRACE .)


state 152

    (187) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (191) statement_list -> statement_list . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 240
    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    statement                      shift and go to state 150
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    expression                     shift and go to state 75
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 153

    (181) labeled_statement -> IDENTIFIER COLON . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    statement                      shift and go to state 241
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    expression                     shift and go to state 75
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 154

    (182) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 242


state 155

    (183) labeled_statement -> DEFAULT COLON . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    statement                      shift and go to state 243
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    expression                     shift and go to state 75
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 156

    (193) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 193 (expression_statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 193 (expression_statement -> expression SEMI .)
    CASE            reduce using rule 193 (expression_statement -> expression SEMI .)
    DEFAULT         reduce using rule 193 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 193 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 193 (expression_statement -> expression SEMI .)
    IF              reduce using rule 193 (expression_statement -> expression SEMI .)
    SWITCH          reduce using rule 193 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 193 (expression_statement -> expression SEMI .)
    DO              reduce using rule 193 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 193 (expression_statement -> expression SEMI .)
    GOTO            reduce using rule 193 (expression_statement -> expression SEMI .)
    CONTINUE        reduce using rule 193 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 193 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 193 (expression_statement -> expression SEMI .)
    INCREMENT       reduce using rule 193 (expression_statement -> expression SEMI .)
    DECREMENT       reduce using rule 193 (expression_statement -> expression SEMI .)
    SIZEOF          reduce using rule 193 (expression_statement -> expression SEMI .)
    MODULO          reduce using rule 193 (expression_statement -> expression SEMI .)
    TIMES           reduce using rule 193 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 193 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 193 (expression_statement -> expression SEMI .)
    NOT             reduce using rule 193 (expression_statement -> expression SEMI .)
    LNOT            reduce using rule 193 (expression_statement -> expression SEMI .)
    STRING          reduce using rule 193 (expression_statement -> expression SEMI .)
    INTEGER         reduce using rule 193 (expression_statement -> expression SEMI .)
    CHARACTER       reduce using rule 193 (expression_statement -> expression SEMI .)
    FLOAT           reduce using rule 193 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 193 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 193 (expression_statement -> expression SEMI .)
    RPAREN          reduce using rule 193 (expression_statement -> expression SEMI .)


state 157

    (83) expression -> expression COMMA . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    assignment_expression          shift and go to state 244
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 158

    (194) selection_statement -> IF LPAREN . expression RPAREN statement
    (195) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 245
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 159

    (14) primary_expression -> LPAREN expression . RPAREN
    (83) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 246
    COMMA           shift and go to state 157


state 160

    (38) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 247


state 161

    (156) type_name -> specifier_qualifier_list .
    (157) type_name -> specifier_qualifier_list . abstract_declarator
    (158) abstract_declarator -> . pointer
    (159) abstract_declarator -> . direct_abstract_declarator
    (160) abstract_declarator -> . pointer direct_abstract_declarator
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (161) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (162) direct_abstract_declarator -> . LBRACKET RBRACKET
    (163) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (164) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (165) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (166) direct_abstract_declarator -> . LPAREN RPAREN
    (167) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (169) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 156 (type_name -> specifier_qualifier_list .)
    TIMES           shift and go to state 24
    LPAREN          shift and go to state 250
    LBRACKET        shift and go to state 224

    abstract_declarator            shift and go to state 248
    pointer                        shift and go to state 249
    direct_abstract_declarator     shift and go to state 222

state 162

    (196) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 251
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 163

    (197) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 252
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 164

    (198) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 253


state 165

    (199) iteration_statement -> FOR LPAREN . expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 71
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression_statement           shift and go to state 254
    expression                     shift and go to state 75
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 166

    (201) jump_statement -> GOTO IDENTIFIER . SEMI

    SEMI            shift and go to state 255


state 167

    (202) jump_statement -> CONTINUE SEMI .

    RBRACE          reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    IDENTIFIER      reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    INCREMENT       reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    DECREMENT       reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    MODULO          reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    STRING          reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    INTEGER         reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    CHARACTER       reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 202 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 202 (jump_statement -> CONTINUE SEMI .)


state 168

    (203) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 203 (jump_statement -> BREAK SEMI .)
    IDENTIFIER      reduce using rule 203 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 203 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 203 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 203 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 203 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 203 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 203 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 203 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 203 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 203 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 203 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 203 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 203 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 203 (jump_statement -> BREAK SEMI .)
    INCREMENT       reduce using rule 203 (jump_statement -> BREAK SEMI .)
    DECREMENT       reduce using rule 203 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 203 (jump_statement -> BREAK SEMI .)
    MODULO          reduce using rule 203 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 203 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 203 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 203 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 203 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 203 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 203 (jump_statement -> BREAK SEMI .)
    INTEGER         reduce using rule 203 (jump_statement -> BREAK SEMI .)
    CHARACTER       reduce using rule 203 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 203 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 203 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 203 (jump_statement -> BREAK SEMI .)


state 169

    (204) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 204 (jump_statement -> RETURN SEMI .)
    IDENTIFIER      reduce using rule 204 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 204 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 204 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 204 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 204 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 204 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 204 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 204 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 204 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 204 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 204 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 204 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 204 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 204 (jump_statement -> RETURN SEMI .)
    INCREMENT       reduce using rule 204 (jump_statement -> RETURN SEMI .)
    DECREMENT       reduce using rule 204 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 204 (jump_statement -> RETURN SEMI .)
    MODULO          reduce using rule 204 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 204 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 204 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 204 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 204 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 204 (jump_statement -> RETURN SEMI .)
    STRING          reduce using rule 204 (jump_statement -> RETURN SEMI .)
    INTEGER         reduce using rule 204 (jump_statement -> RETURN SEMI .)
    CHARACTER       reduce using rule 204 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 204 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 204 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 204 (jump_statement -> RETURN SEMI .)


state 170

    (205) jump_statement -> RETURN expression . SEMI
    (83) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 256
    COMMA           shift and go to state 157


state 171

    (70) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    unary_expression               shift and go to state 89
    assignment_expression          shift and go to state 257
    conditional_expression         shift and go to state 88
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 172

    (71) assignment_operator -> EQUALS .

    INCREMENT       reduce using rule 71 (assignment_operator -> EQUALS .)
    DECREMENT       reduce using rule 71 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 71 (assignment_operator -> EQUALS .)
    MODULO          reduce using rule 71 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 71 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 71 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 71 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 71 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 71 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 71 (assignment_operator -> EQUALS .)
    INTEGER         reduce using rule 71 (assignment_operator -> EQUALS .)
    CHARACTER       reduce using rule 71 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 71 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 71 (assignment_operator -> EQUALS .)


state 173

    (72) assignment_operator -> TIMESEQUAL .

    INCREMENT       reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    DECREMENT       reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    SIZEOF          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    MODULO          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    IDENTIFIER      reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    STRING          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    INTEGER         reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    CHARACTER       reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    FLOAT           reduce using rule 72 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 72 (assignment_operator -> TIMESEQUAL .)


state 174

    (73) assignment_operator -> DIVEQUAL .

    INCREMENT       reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    DECREMENT       reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    SIZEOF          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    MODULO          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    IDENTIFIER      reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    STRING          reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    INTEGER         reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    CHARACTER       reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    FLOAT           reduce using rule 73 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 73 (assignment_operator -> DIVEQUAL .)


state 175

    (74) assignment_operator -> MODEQUAL .

    INCREMENT       reduce using rule 74 (assignment_operator -> MODEQUAL .)
    DECREMENT       reduce using rule 74 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    MODULO          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 74 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 74 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 74 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 74 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 74 (assignment_operator -> MODEQUAL .)
    IDENTIFIER      reduce using rule 74 (assignment_operator -> MODEQUAL .)
    STRING          reduce using rule 74 (assignment_operator -> MODEQUAL .)
    INTEGER         reduce using rule 74 (assignment_operator -> MODEQUAL .)
    CHARACTER       reduce using rule 74 (assignment_operator -> MODEQUAL .)
    FLOAT           reduce using rule 74 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 74 (assignment_operator -> MODEQUAL .)


state 176

    (75) assignment_operator -> PLUSEQUAL .

    INCREMENT       reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    DECREMENT       reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    MODULO          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    IDENTIFIER      reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    STRING          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    INTEGER         reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    CHARACTER       reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    FLOAT           reduce using rule 75 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 75 (assignment_operator -> PLUSEQUAL .)


state 177

    (76) assignment_operator -> MINUSEQUAL .

    INCREMENT       reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    DECREMENT       reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    MODULO          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    IDENTIFIER      reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    STRING          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    INTEGER         reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    CHARACTER       reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    FLOAT           reduce using rule 76 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 76 (assignment_operator -> MINUSEQUAL .)


state 178

    (77) assignment_operator -> LSHIFTEQUAL .

    INCREMENT       reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    DECREMENT       reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    MODULO          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    IDENTIFIER      reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    STRING          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    INTEGER         reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    CHARACTER       reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT           reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 77 (assignment_operator -> LSHIFTEQUAL .)


state 179

    (78) assignment_operator -> RSHIFTEQUAL .

    INCREMENT       reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    DECREMENT       reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    MODULO          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    IDENTIFIER      reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    STRING          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    INTEGER         reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    CHARACTER       reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT           reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 78 (assignment_operator -> RSHIFTEQUAL .)


state 180

    (79) assignment_operator -> ANDEQUAL .

    INCREMENT       reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    DECREMENT       reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    MODULO          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    IDENTIFIER      reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    STRING          reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    INTEGER         reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    CHARACTER       reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    FLOAT           reduce using rule 79 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 79 (assignment_operator -> ANDEQUAL .)


state 181

    (80) assignment_operator -> XOREQUAL .

    INCREMENT       reduce using rule 80 (assignment_operator -> XOREQUAL .)
    DECREMENT       reduce using rule 80 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 80 (assignment_operator -> XOREQUAL .)
    MODULO          reduce using rule 80 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 80 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 80 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 80 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 80 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 80 (assignment_operator -> XOREQUAL .)
    IDENTIFIER      reduce using rule 80 (assignment_operator -> XOREQUAL .)
    STRING          reduce using rule 80 (assignment_operator -> XOREQUAL .)
    INTEGER         reduce using rule 80 (assignment_operator -> XOREQUAL .)
    CHARACTER       reduce using rule 80 (assignment_operator -> XOREQUAL .)
    FLOAT           reduce using rule 80 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 80 (assignment_operator -> XOREQUAL .)


state 182

    (81) assignment_operator -> OREQUAL .

    INCREMENT       reduce using rule 81 (assignment_operator -> OREQUAL .)
    DECREMENT       reduce using rule 81 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 81 (assignment_operator -> OREQUAL .)
    MODULO          reduce using rule 81 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 81 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 81 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 81 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 81 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 81 (assignment_operator -> OREQUAL .)
    IDENTIFIER      reduce using rule 81 (assignment_operator -> OREQUAL .)
    STRING          reduce using rule 81 (assignment_operator -> OREQUAL .)
    INTEGER         reduce using rule 81 (assignment_operator -> OREQUAL .)
    CHARACTER       reduce using rule 81 (assignment_operator -> OREQUAL .)
    FLOAT           reduce using rule 81 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 81 (assignment_operator -> OREQUAL .)


state 183

    (68) conditional_expression -> logical_or_expression TERNARY . expression COLON conditional_expression
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    logical_or_expression          shift and go to state 90
    expression                     shift and go to state 258
    conditional_expression         shift and go to state 88
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 89
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 184

    (66) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    logical_and_expression         shift and go to state 259
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 185

    (16) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    postfix_expression             shift and go to state 91
    expression                     shift and go to state 260
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 186

    (17) postfix_expression -> postfix_expression LPAREN . RPAREN
    (18) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (23) argument_expression_list -> . assignment_expression
    (24) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 261
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    postfix_expression             shift and go to state 91
    argument_expression_list       shift and go to state 262
    assignment_expression          shift and go to state 263
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 187

    (19) postfix_expression -> postfix_expression PERIOD . IDENTIFIER

    IDENTIFIER      shift and go to state 264


state 188

    (20) postfix_expression -> postfix_expression ARROW . IDENTIFIER

    IDENTIFIER      shift and go to state 265


state 189

    (21) postfix_expression -> postfix_expression INCREMENT .

    LBRACKET        reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    LPAREN          reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    PERIOD          reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    ARROW           reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    INCREMENT       reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    DECREMENT       reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    EQUALS          reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    TIMESEQUAL      reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    DIVEQUAL        reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    MODEQUAL        reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    PLUSEQUAL       reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    MINUSEQUAL      reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    LSHIFTEQUAL     reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    RSHIFTEQUAL     reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    ANDEQUAL        reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    XOREQUAL        reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    OREQUAL         reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    TIMES           reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDE          reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    MODULO          reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    PLUS            reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    MINUS           reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    LSHIFT          reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    RSHIFT          reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    LT              reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    GT              reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    LE              reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    GE              reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    EQ              reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    NE              reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    AND             reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    XOR             reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    OR              reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    LAND            reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    TERNARY         reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    LOR             reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    SEMI            reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    COMMA           reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    RBRACKET        reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    COLON           reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    RPAREN          reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)
    RBRACE          reduce using rule 21 (postfix_expression -> postfix_expression INCREMENT .)


state 190

    (22) postfix_expression -> postfix_expression DECREMENT .

    LBRACKET        reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    LPAREN          reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    PERIOD          reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    ARROW           reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    INCREMENT       reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    DECREMENT       reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    EQUALS          reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    TIMESEQUAL      reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    DIVEQUAL        reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    MODEQUAL        reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    PLUSEQUAL       reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    MINUSEQUAL      reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    LSHIFTEQUAL     reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    RSHIFTEQUAL     reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    ANDEQUAL        reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    XOREQUAL        reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    OREQUAL         reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    TIMES           reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDE          reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    MODULO          reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    PLUS            reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    MINUS           reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    LSHIFT          reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    RSHIFT          reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    LT              reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    GT              reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    LE              reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    GE              reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    EQ              reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    NE              reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    AND             reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    XOR             reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    OR              reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    LAND            reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    TERNARY         reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    LOR             reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    SEMI            reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    COMMA           reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    RBRACKET        reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    COLON           reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    RPAREN          reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)
    RBRACE          reduce using rule 22 (postfix_expression -> postfix_expression DECREMENT .)


state 191

    (26) unary_expression -> INCREMENT unary_expression .

    EQUALS          reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    TIMESEQUAL      reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    DIVEQUAL        reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    MODEQUAL        reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    PLUSEQUAL       reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    MINUSEQUAL      reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    LSHIFTEQUAL     reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    RSHIFTEQUAL     reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    ANDEQUAL        reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    XOREQUAL        reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    OREQUAL         reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    TIMES           reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    MODULO          reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    PLUS            reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    LSHIFT          reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    RSHIFT          reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    LT              reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    GT              reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    LE              reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    GE              reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    EQ              reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    NE              reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    AND             reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    XOR             reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    OR              reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    LAND            reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    TERNARY         reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    LOR             reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    SEMI            reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    RBRACKET        reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    RPAREN          reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)
    RBRACE          reduce using rule 26 (unary_expression -> INCREMENT unary_expression .)


state 192

    (14) primary_expression -> LPAREN . expression RPAREN
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 159
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 193

    (27) unary_expression -> DECREMENT unary_expression .

    EQUALS          reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    TIMESEQUAL      reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    DIVEQUAL        reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    MODEQUAL        reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    PLUSEQUAL       reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    MINUSEQUAL      reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    LSHIFTEQUAL     reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    RSHIFTEQUAL     reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    ANDEQUAL        reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    XOREQUAL        reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    OREQUAL         reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    TIMES           reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    MODULO          reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    PLUS            reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    LSHIFT          reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    RSHIFT          reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    LT              reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    GT              reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    LE              reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    GE              reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    EQ              reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    NE              reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    AND             reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    XOR             reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    OR              reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    LAND            reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    TERNARY         reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    LOR             reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    SEMI            reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    RBRACKET        reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    RPAREN          reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)
    RBRACE          reduce using rule 27 (unary_expression -> DECREMENT unary_expression .)


state 194

    (28) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    MODULO          reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    TERNARY         reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 28 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 28 (unary_expression -> unary_operator cast_expression .)


state 195

    (29) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    TIMESEQUAL      reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    DIVEQUAL        reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    MODULO          reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    TERNARY         reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 29 (unary_expression -> SIZEOF unary_expression .)


state 196

    (30) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (14) primary_expression -> LPAREN . expression RPAREN
    (156) type_name -> . specifier_qualifier_list
    (157) type_name -> . specifier_qualifier_list abstract_declarator
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (119) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_specifier
    (121) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_qualifier
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 87
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    ENUM            shift and go to state 28
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    LPAREN          shift and go to state 77

    type_name                      shift and go to state 266
    expression                     shift and go to state 159
    specifier_qualifier_list       shift and go to state 161
    assignment_expression          shift and go to state 86
    type_specifier                 shift and go to state 138
    type_qualifier                 shift and go to state 139
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    struct_or_union                shift and go to state 27
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 197

    (64) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    inclusive_or_expression        shift and go to state 267
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 198

    (62) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    exclusive_or_expression        shift and go to state 268
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 199

    (60) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    and_expression                 shift and go to state 269
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 200

    (58) and_expression -> and_expression AND . equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    equality_expression            shift and go to state 270
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 201

    (55) equality_expression -> equality_expression EQ . relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    relational_expression          shift and go to state 271
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 202

    (56) equality_expression -> equality_expression NE . relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    relational_expression          shift and go to state 272
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 203

    (50) relational_expression -> relational_expression LT . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    shift_expression               shift and go to state 273
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 204

    (51) relational_expression -> relational_expression GT . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    shift_expression               shift and go to state 274
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 205

    (52) relational_expression -> relational_expression LE . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    shift_expression               shift and go to state 275
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 206

    (53) relational_expression -> relational_expression GE . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    shift_expression               shift and go to state 276
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 207

    (47) shift_expression -> shift_expression LSHIFT . additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    additive_expression            shift and go to state 277
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 208

    (48) shift_expression -> shift_expression RSHIFT . additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    additive_expression            shift and go to state 278
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 209

    (44) additive_expression -> additive_expression PLUS . multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    multiplicative_expression      shift and go to state 279
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 210

    (45) additive_expression -> additive_expression MINUS . multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    multiplicative_expression      shift and go to state 280
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 211

    (40) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    cast_expression                shift and go to state 281
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 212

    (41) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    cast_expression                shift and go to state 282
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 213

    (42) multiplicative_expression -> multiplicative_expression MODULO . cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    cast_expression                shift and go to state 283
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 214

    (136) direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .

    LBRACKET        reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    LBRACE          reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    VOID            reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    CHAR            reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    SHORT           reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    INT             reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    LONG            reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    FLOAT           reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    DOUBLE          reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    SIGNED          reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    UNSIGNED        reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    CONST           reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    VOLATILE        reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    ENUM            reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    STRUCT          reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    UNION           reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    EQUALS          reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    SEMI            reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    COLON           reduce using rule 136 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)


state 215

    (138) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 138 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 216

    (139) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LBRACKET        reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SHORT           reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LONG            reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    DOUBLE          reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SIGNED          reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNSIGNED        reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CONST           reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOLATILE        reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ENUM            reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STRUCT          reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNION           reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMI            reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COLON           reduce using rule 139 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 217

    (155) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 284


state 218

    (148) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (150) parameter_list -> parameter_list COMMA . parameter_declaration
    (151) parameter_declaration -> . declaration_specifiers declarator
    (152) parameter_declaration -> . declaration_specifiers abstract_declarator
    (153) parameter_declaration -> . declaration_specifiers
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 285
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    parameter_declaration          shift and go to state 286
    declaration_specifiers         shift and go to state 130
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 219

    (151) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 151 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 151 (parameter_declaration -> declaration_specifiers declarator .)


state 220

    (152) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 152 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RPAREN          reduce using rule 152 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 221

    (132) declarator -> pointer . direct_declarator
    (158) abstract_declarator -> pointer .
    (160) abstract_declarator -> pointer . direct_abstract_declarator
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN
    (161) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (162) direct_abstract_declarator -> . LBRACKET RBRACKET
    (163) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (164) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (165) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (166) direct_abstract_declarator -> . LPAREN RPAREN
    (167) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (169) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 158 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 158 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 223
    LBRACKET        shift and go to state 224

    direct_declarator              shift and go to state 43
    direct_abstract_declarator     shift and go to state 287

state 222

    (159) abstract_declarator -> direct_abstract_declarator .
    (164) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET RBRACKET
    (165) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET constant_expression RBRACKET
    (168) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (169) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 159 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 159 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 288
    LPAREN          shift and go to state 289


state 223

    (135) direct_declarator -> LPAREN . declarator RPAREN
    (161) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (166) direct_abstract_declarator -> LPAREN . RPAREN
    (167) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (158) abstract_declarator -> . pointer
    (159) abstract_declarator -> . direct_abstract_declarator
    (160) abstract_declarator -> . pointer direct_abstract_declarator
    (147) parameter_type_list -> . parameter_list
    (148) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN
    (161) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (162) direct_abstract_declarator -> . LBRACKET RBRACKET
    (163) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (164) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (165) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (166) direct_abstract_declarator -> . LPAREN RPAREN
    (167) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (169) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (149) parameter_list -> . parameter_declaration
    (150) parameter_list -> . parameter_list COMMA parameter_declaration
    (151) parameter_declaration -> . declaration_specifiers declarator
    (152) parameter_declaration -> . declaration_specifiers abstract_declarator
    (153) parameter_declaration -> . declaration_specifiers
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    RPAREN          shift and go to state 290
    TIMES           shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 223
    LBRACKET        shift and go to state 224
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    declarator                     shift and go to state 49
    abstract_declarator            shift and go to state 291
    parameter_type_list            shift and go to state 292
    pointer                        shift and go to state 221
    direct_declarator              shift and go to state 10
    direct_abstract_declarator     shift and go to state 222
    parameter_list                 shift and go to state 127
    parameter_declaration          shift and go to state 129
    declaration_specifiers         shift and go to state 130
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 224

    (162) direct_abstract_declarator -> LBRACKET . RBRACKET
    (163) direct_abstract_declarator -> LBRACKET . constant_expression RBRACKET
    (84) constant_expression -> . conditional_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    RBRACKET        shift and go to state 293
    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    constant_expression            shift and go to state 294
    conditional_expression         shift and go to state 119
    logical_or_expression          shift and go to state 90
    logical_and_expression         shift and go to state 97
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 225

    (106) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list . RBRACE
    (113) struct_declaration_list -> struct_declaration_list . struct_declaration
    (111) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (119) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_specifier
    (121) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (122) specifier_qualifier_list -> . type_qualifier
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    RBRACE          shift and go to state 295
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    struct_or_union                shift and go to state 27
    struct_declaration             shift and go to state 227
    specifier_qualifier_list       shift and go to state 137
    type_specifier                 shift and go to state 138
    type_qualifier                 shift and go to state 139
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21

state 226

    (107) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .

    VOID            reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 107 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)


state 227

    (113) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 228

    (111) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI
    (115) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            shift and go to state 296
    COMMA           shift and go to state 297


state 229

    (114) struct_declarator_list -> struct_declarator .

    SEMI            reduce using rule 114 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 114 (struct_declarator_list -> struct_declarator .)


state 230

    (116) struct_declarator -> declarator .
    (118) struct_declarator -> declarator . COLON constant_expression

    SEMI            reduce using rule 116 (struct_declarator -> declarator .)
    COMMA           reduce using rule 116 (struct_declarator -> declarator .)
    COLON           shift and go to state 298


state 231

    (117) struct_declarator -> COLON . constant_expression
    (84) constant_expression -> . conditional_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    constant_expression            shift and go to state 299
    conditional_expression         shift and go to state 119
    logical_or_expression          shift and go to state 90
    logical_and_expression         shift and go to state 97
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 232

    (119) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    COLON           reduce using rule 119 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    TIMES           reduce using rule 119 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 119 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LPAREN          reduce using rule 119 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 119 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 119 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 233

    (121) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    COLON           reduce using rule 121 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    TIMES           reduce using rule 121 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 121 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LPAREN          reduce using rule 121 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 121 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RPAREN          reduce using rule 121 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 234

    (123) enum_specifier -> ENUM LBRACE enumerator_list RBRACE .

    VOID            reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    IDENTIFIER      reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 123 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)


state 235

    (127) enumerator_list -> enumerator_list COMMA . enumerator
    (128) enumerator -> . IDENTIFIER
    (129) enumerator -> . IDENTIFIER EQUALS constant_expression

    IDENTIFIER      shift and go to state 142

    enumerator                     shift and go to state 300

state 236

    (129) enumerator -> IDENTIFIER EQUALS . constant_expression
    (84) constant_expression -> . conditional_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    constant_expression            shift and go to state 301
    conditional_expression         shift and go to state 119
    logical_or_expression          shift and go to state 90
    logical_and_expression         shift and go to state 97
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 237

    (124) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list . RBRACE
    (127) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 302
    COMMA           shift and go to state 235


state 238

    (171) initializer -> LBRACE initializer_list . RBRACE
    (172) initializer -> LBRACE initializer_list . COMMA RBRACE
    (174) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 303
    COMMA           shift and go to state 304


state 239

    (173) initializer_list -> initializer .

    RBRACE          reduce using rule 173 (initializer_list -> initializer .)
    COMMA           reduce using rule 173 (initializer_list -> initializer .)


state 240

    (187) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    VOID            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHAR            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SHORT           reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LONG            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FLOAT           reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DOUBLE          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SIGNED          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    UNSIGNED        reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CONST           reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOLATILE        reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TIMES           reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IDENTIFIER      reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ENUM            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRUCT          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    UNION           reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CASE            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DEFAULT         reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SEMI            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SWITCH          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DO              reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    GOTO            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CONTINUE        reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INCREMENT       reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DECREMENT       reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SIZEOF          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MODULO          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUS            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUS           reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    NOT             reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LNOT            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRING          reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INTEGER         reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHARACTER       reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 187 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 241

    (181) labeled_statement -> IDENTIFIER COLON statement .

    RBRACE          reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    LBRACE          reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMI            reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    INCREMENT       reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    DECREMENT       reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    MODULO          reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    TIMES           reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    NOT             reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    LNOT            reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING          reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    INTEGER         reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    CHARACTER       reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 181 (labeled_statement -> IDENTIFIER COLON statement .)


state 242

    (182) labeled_statement -> CASE constant_expression COLON . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    statement                      shift and go to state 305
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    expression                     shift and go to state 75
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 243

    (183) labeled_statement -> DEFAULT COLON statement .

    RBRACE          reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    INCREMENT       reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    DECREMENT       reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    MODULO          reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    STRING          reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    INTEGER         reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    CHARACTER       reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 183 (labeled_statement -> DEFAULT COLON statement .)


state 244

    (83) expression -> expression COMMA assignment_expression .

    SEMI            reduce using rule 83 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 83 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 83 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 83 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 83 (expression -> expression COMMA assignment_expression .)


state 245

    (194) selection_statement -> IF LPAREN expression . RPAREN statement
    (195) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (83) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 306
    COMMA           shift and go to state 157


state 246

    (14) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    TERNARY         reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 14 (primary_expression -> LPAREN expression RPAREN .)


state 247

    (38) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    cast_expression                shift and go to state 307
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 248

    (157) type_name -> specifier_qualifier_list abstract_declarator .

    RPAREN          reduce using rule 157 (type_name -> specifier_qualifier_list abstract_declarator .)


state 249

    (158) abstract_declarator -> pointer .
    (160) abstract_declarator -> pointer . direct_abstract_declarator
    (161) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (162) direct_abstract_declarator -> . LBRACKET RBRACKET
    (163) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (164) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (165) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (166) direct_abstract_declarator -> . LPAREN RPAREN
    (167) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (169) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 158 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 250
    LBRACKET        shift and go to state 224

    direct_abstract_declarator     shift and go to state 287

state 250

    (161) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (166) direct_abstract_declarator -> LPAREN . RPAREN
    (167) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (158) abstract_declarator -> . pointer
    (159) abstract_declarator -> . direct_abstract_declarator
    (160) abstract_declarator -> . pointer direct_abstract_declarator
    (147) parameter_type_list -> . parameter_list
    (148) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (161) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (162) direct_abstract_declarator -> . LBRACKET RBRACKET
    (163) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (164) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (165) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (166) direct_abstract_declarator -> . LPAREN RPAREN
    (167) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (169) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (149) parameter_list -> . parameter_declaration
    (150) parameter_list -> . parameter_list COMMA parameter_declaration
    (151) parameter_declaration -> . declaration_specifiers declarator
    (152) parameter_declaration -> . declaration_specifiers abstract_declarator
    (153) parameter_declaration -> . declaration_specifiers
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    RPAREN          shift and go to state 290
    TIMES           shift and go to state 24
    LPAREN          shift and go to state 250
    LBRACKET        shift and go to state 224
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    abstract_declarator            shift and go to state 291
    parameter_type_list            shift and go to state 292
    pointer                        shift and go to state 249
    direct_abstract_declarator     shift and go to state 222
    parameter_list                 shift and go to state 127
    parameter_declaration          shift and go to state 129
    declaration_specifiers         shift and go to state 130
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 251

    (196) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (83) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 308
    COMMA           shift and go to state 157


state 252

    (197) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (83) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 309
    COMMA           shift and go to state 157


state 253

    (198) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 310


state 254

    (199) iteration_statement -> FOR LPAREN expression_statement . expression_statement RPAREN statement
    (200) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 71
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression_statement           shift and go to state 311
    expression                     shift and go to state 75
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 255

    (201) jump_statement -> GOTO IDENTIFIER SEMI .

    RBRACE          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CASE            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEFAULT         reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LBRACE          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SEMI            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IF              reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SWITCH          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    WHILE           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DO              reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FOR             reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    GOTO            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CONTINUE        reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BREAK           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    RETURN          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INCREMENT       reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DECREMENT       reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SIZEOF          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    MODULO          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    TIMES           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    PLUS            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    MINUS           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    NOT             reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LNOT            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STRING          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INTEGER         reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CHARACTER       reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FLOAT           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LPAREN          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ELSE            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMI .)


state 256

    (205) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    IDENTIFIER      reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    INCREMENT       reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    DECREMENT       reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    MODULO          reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    INTEGER         reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    CHARACTER       reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 205 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 205 (jump_statement -> RETURN expression SEMI .)


state 257

    (70) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMI            reduce using rule 70 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 70 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 70 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 70 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 70 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 70 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 258

    (68) conditional_expression -> logical_or_expression TERNARY expression . COLON conditional_expression
    (83) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 312
    COMMA           shift and go to state 157


state 259

    (66) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (64) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    TERNARY         reduce using rule 66 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 66 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMI            reduce using rule 66 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 66 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACKET        reduce using rule 66 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 66 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 66 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACE          reduce using rule 66 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 197


state 260

    (16) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (83) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 313
    COMMA           shift and go to state 157


state 261

    (17) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INCREMENT       reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DECREMENT       reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODULO          reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TERNARY         reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 17 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 262

    (18) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (24) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 314
    COMMA           shift and go to state 315


state 263

    (23) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 23 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 23 (argument_expression_list -> assignment_expression .)


state 264

    (19) postfix_expression -> postfix_expression PERIOD IDENTIFIER .

    LBRACKET        reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LPAREN          reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    PERIOD          reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    ARROW           reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    INCREMENT       reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    DECREMENT       reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    EQUALS          reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    TIMESEQUAL      reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    DIVEQUAL        reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MODEQUAL        reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    PLUSEQUAL       reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MINUSEQUAL      reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    ANDEQUAL        reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    XOREQUAL        reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    OREQUAL         reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    TIMES           reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    DIVIDE          reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MODULO          reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    PLUS            reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MINUS           reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LSHIFT          reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RSHIFT          reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LT              reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    GT              reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LE              reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    GE              reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    EQ              reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    NE              reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    AND             reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    XOR             reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    OR              reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LAND            reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    TERNARY         reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LOR             reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    SEMI            reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    COMMA           reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RBRACKET        reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    COLON           reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RPAREN          reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RBRACE          reduce using rule 19 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)


state 265

    (20) postfix_expression -> postfix_expression ARROW IDENTIFIER .

    LBRACKET        reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LPAREN          reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PERIOD          reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ARROW           reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    INCREMENT       reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DECREMENT       reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    EQUALS          reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    TIMESEQUAL      reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVEQUAL        reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODEQUAL        reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUSEQUAL       reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUSEQUAL      reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ANDEQUAL        reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    XOREQUAL        reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    OREQUAL         reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    TIMES           reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE          reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODULO          reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUS            reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUS           reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LSHIFT          reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RSHIFT          reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LT              reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GT              reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LE              reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GE              reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    EQ              reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    NE              reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    AND             reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    XOR             reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    OR              reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LAND            reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    TERNARY         reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LOR             reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SEMI            reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COMMA           reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RBRACKET        reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COLON           reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RPAREN          reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RBRACE          reduce using rule 20 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)


state 266

    (30) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 316


state 267

    (64) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (62) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 64 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    TERNARY         reduce using rule 64 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 64 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMI            reduce using rule 64 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 64 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACKET        reduce using rule 64 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COLON           reduce using rule 64 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 64 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACE          reduce using rule 64 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    OR              shift and go to state 198


state 268

    (62) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (60) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 62 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LAND            reduce using rule 62 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    TERNARY         reduce using rule 62 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LOR             reduce using rule 62 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMI            reduce using rule 62 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 62 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACKET        reduce using rule 62 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 62 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 62 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACE          reduce using rule 62 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 199


state 269

    (60) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (58) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    TERNARY         reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMI            reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACKET        reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACE          reduce using rule 60 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             shift and go to state 200


state 270

    (58) and_expression -> and_expression AND equality_expression .
    (55) equality_expression -> equality_expression . EQ relational_expression
    (56) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    LAND            reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    TERNARY         reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    LOR             reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    SEMI            reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    RBRACKET        reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    RBRACE          reduce using rule 58 (and_expression -> and_expression AND equality_expression .)
    EQ              shift and go to state 201
    NE              shift and go to state 202


state 271

    (55) equality_expression -> equality_expression EQ relational_expression .
    (50) relational_expression -> relational_expression . LT shift_expression
    (51) relational_expression -> relational_expression . GT shift_expression
    (52) relational_expression -> relational_expression . LE shift_expression
    (53) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    XOR             reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    TERNARY         reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 55 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 203
    GT              shift and go to state 204
    LE              shift and go to state 205
    GE              shift and go to state 206


state 272

    (56) equality_expression -> equality_expression NE relational_expression .
    (50) relational_expression -> relational_expression . LT shift_expression
    (51) relational_expression -> relational_expression . GT shift_expression
    (52) relational_expression -> relational_expression . LE shift_expression
    (53) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    XOR             reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    TERNARY         reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    COLON           reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    RBRACE          reduce using rule 56 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 203
    GT              shift and go to state 204
    LE              shift and go to state 205
    GE              shift and go to state 206


state 273

    (50) relational_expression -> relational_expression LT shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    NE              reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    XOR             reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    LAND            reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    TERNARY         reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    LOR             reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    SEMI            reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    COLON           reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 50 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 207
    RSHIFT          shift and go to state 208


state 274

    (51) relational_expression -> relational_expression GT shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    NE              reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    XOR             reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    LAND            reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    TERNARY         reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    LOR             reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    SEMI            reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    COLON           reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 51 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 207
    RSHIFT          shift and go to state 208


state 275

    (52) relational_expression -> relational_expression LE shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    EQ              reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    XOR             reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    LAND            reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    TERNARY         reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    LOR             reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    SEMI            reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    RBRACKET        reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    COLON           reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    RPAREN          reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    RBRACE          reduce using rule 52 (relational_expression -> relational_expression LE shift_expression .)
    LSHIFT          shift and go to state 207
    RSHIFT          shift and go to state 208


state 276

    (53) relational_expression -> relational_expression GE shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    EQ              reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    XOR             reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    LAND            reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    TERNARY         reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    LOR             reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    SEMI            reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    RBRACKET        reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    COLON           reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    RPAREN          reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    RBRACE          reduce using rule 53 (relational_expression -> relational_expression GE shift_expression .)
    LSHIFT          shift and go to state 207
    RSHIFT          shift and go to state 208


state 277

    (47) shift_expression -> shift_expression LSHIFT additive_expression .
    (44) additive_expression -> additive_expression . PLUS multiplicative_expression
    (45) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LE              reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GE              reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NE              reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LAND            reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    TERNARY         reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LOR             reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMI            reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACKET        reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACE          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 209
    MINUS           shift and go to state 210


state 278

    (48) shift_expression -> shift_expression RSHIFT additive_expression .
    (44) additive_expression -> additive_expression . PLUS multiplicative_expression
    (45) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LE              reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GE              reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NE              reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LAND            reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    TERNARY         reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LOR             reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMI            reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACKET        reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACE          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 209
    MINUS           shift and go to state 210


state 279

    (44) additive_expression -> additive_expression PLUS multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (42) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TERNARY         reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 211
    DIVIDE          shift and go to state 212
    MODULO          shift and go to state 213


state 280

    (45) additive_expression -> additive_expression MINUS multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (42) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TERNARY         reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 211
    DIVIDE          shift and go to state 212
    MODULO          shift and go to state 213


state 281

    (40) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MODULO          reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LSHIFT          reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RSHIFT          reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE              reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE              reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE              reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    TERNARY         reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMI            reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 40 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 282

    (41) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MODULO          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE              reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE              reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE              reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    TERNARY         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI            reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 283

    (42) multiplicative_expression -> multiplicative_expression MODULO cast_expression .

    TIMES           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    DIVIDE          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    MODULO          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    PLUS            reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    MINUS           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LT              reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    GT              reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LE              reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    GE              reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    EQ              reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    NE              reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    AND             reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    XOR             reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    OR              reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LAND            reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    TERNARY         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LOR             reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    SEMI            reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    COMMA           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RBRACKET        reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    COLON           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RPAREN          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RBRACE          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)


state 284

    (155) identifier_list -> identifier_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 155 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 155 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 285

    (148) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 148 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 286

    (150) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 150 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 150 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 287

    (160) abstract_declarator -> pointer direct_abstract_declarator .
    (164) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET RBRACKET
    (165) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET constant_expression RBRACKET
    (168) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (169) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 160 (abstract_declarator -> pointer direct_abstract_declarator .)
    RPAREN          reduce using rule 160 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 288
    LPAREN          shift and go to state 289


state 288

    (164) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . RBRACKET
    (165) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . constant_expression RBRACKET
    (84) constant_expression -> . conditional_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    RBRACKET        shift and go to state 317
    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    constant_expression            shift and go to state 318
    conditional_expression         shift and go to state 119
    logical_or_expression          shift and go to state 90
    logical_and_expression         shift and go to state 97
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 289

    (168) direct_abstract_declarator -> direct_abstract_declarator LPAREN . RPAREN
    (169) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list RPAREN
    (147) parameter_type_list -> . parameter_list
    (148) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (149) parameter_list -> . parameter_declaration
    (150) parameter_list -> . parameter_list COMMA parameter_declaration
    (151) parameter_declaration -> . declaration_specifiers declarator
    (152) parameter_declaration -> . declaration_specifiers abstract_declarator
    (153) parameter_declaration -> . declaration_specifiers
    (87) declaration_specifiers -> . type_specifier
    (88) declaration_specifiers -> . type_specifier declaration_specifiers
    (89) declaration_specifiers -> . type_qualifier
    (90) declaration_specifiers -> . type_qualifier declaration_specifiers
    (95) type_specifier -> . VOID
    (96) type_specifier -> . CHAR
    (97) type_specifier -> . SHORT
    (98) type_specifier -> . INT
    (99) type_specifier -> . LONG
    (100) type_specifier -> . FLOAT
    (101) type_specifier -> . DOUBLE
    (102) type_specifier -> . SIGNED
    (103) type_specifier -> . UNSIGNED
    (104) type_specifier -> . struct_or_union_specifier
    (105) type_specifier -> . enum_specifier
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (107) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (124) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    RPAREN          shift and go to state 319
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    SIGNED          shift and go to state 18
    UNSIGNED        shift and go to state 19
    CONST           shift and go to state 22
    VOLATILE        shift and go to state 23
    ENUM            shift and go to state 28
    STRUCT          shift and go to state 29
    UNION           shift and go to state 30

    parameter_type_list            shift and go to state 320
    parameter_list                 shift and go to state 127
    parameter_declaration          shift and go to state 129
    declaration_specifiers         shift and go to state 130
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 20
    enum_specifier                 shift and go to state 21
    struct_or_union                shift and go to state 27

state 290

    (166) direct_abstract_declarator -> LPAREN RPAREN .

    LBRACKET        reduce using rule 166 (direct_abstract_declarator -> LPAREN RPAREN .)
    LPAREN          reduce using rule 166 (direct_abstract_declarator -> LPAREN RPAREN .)
    COMMA           reduce using rule 166 (direct_abstract_declarator -> LPAREN RPAREN .)
    RPAREN          reduce using rule 166 (direct_abstract_declarator -> LPAREN RPAREN .)


state 291

    (161) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 321


state 292

    (167) direct_abstract_declarator -> LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 322


state 293

    (162) direct_abstract_declarator -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 162 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 162 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 162 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 162 (direct_abstract_declarator -> LBRACKET RBRACKET .)


state 294

    (163) direct_abstract_declarator -> LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 323


state 295

    (106) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .

    VOID            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)


state 296

    (111) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .

    RBRACE          reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOID            reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CHAR            reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SHORT           reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    INT             reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    LONG            reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    FLOAT           reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    DOUBLE          reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SIGNED          reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNSIGNED        reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CONST           reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOLATILE        reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    ENUM            reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STRUCT          reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNION           reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)


state 297

    (115) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (116) struct_declarator -> . declarator
    (117) struct_declarator -> . COLON constant_expression
    (118) struct_declarator -> . declarator COLON constant_expression
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (141) pointer -> . TIMES
    (142) pointer -> . TIMES type_qualifier_list
    (143) pointer -> . TIMES pointer
    (144) pointer -> . TIMES type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . LPAREN declarator RPAREN
    (136) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (137) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (138) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (139) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (140) direct_declarator -> . direct_declarator LPAREN RPAREN

    COLON           shift and go to state 231
    TIMES           shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 26

    struct_declarator              shift and go to state 324
    declarator                     shift and go to state 230
    pointer                        shift and go to state 9
    direct_declarator              shift and go to state 10

state 298

    (118) struct_declarator -> declarator COLON . constant_expression
    (84) constant_expression -> . conditional_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    constant_expression            shift and go to state 325
    conditional_expression         shift and go to state 119
    logical_or_expression          shift and go to state 90
    logical_and_expression         shift and go to state 97
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 299

    (117) struct_declarator -> COLON constant_expression .

    SEMI            reduce using rule 117 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 117 (struct_declarator -> COLON constant_expression .)


state 300

    (127) enumerator_list -> enumerator_list COMMA enumerator .

    RBRACE          reduce using rule 127 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 127 (enumerator_list -> enumerator_list COMMA enumerator .)


state 301

    (129) enumerator -> IDENTIFIER EQUALS constant_expression .

    RBRACE          reduce using rule 129 (enumerator -> IDENTIFIER EQUALS constant_expression .)
    COMMA           reduce using rule 129 (enumerator -> IDENTIFIER EQUALS constant_expression .)


state 302

    (124) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .

    VOID            reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    IDENTIFIER      reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)


state 303

    (171) initializer -> LBRACE initializer_list RBRACE .

    SEMI            reduce using rule 171 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 171 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 171 (initializer -> LBRACE initializer_list RBRACE .)


state 304

    (172) initializer -> LBRACE initializer_list COMMA . RBRACE
    (174) initializer_list -> initializer_list COMMA . initializer
    (170) initializer -> . assignment_expression
    (171) initializer -> . LBRACE initializer_list RBRACE
    (172) initializer -> . LBRACE initializer_list COMMA RBRACE
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 326
    LBRACE          shift and go to state 147
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    initializer                    shift and go to state 327
    assignment_expression          shift and go to state 146
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 305

    (182) labeled_statement -> CASE constant_expression COLON statement .

    RBRACE          reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    INCREMENT       reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    DECREMENT       reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    MODULO          reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING          reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    INTEGER         reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    CHARACTER       reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 182 (labeled_statement -> CASE constant_expression COLON statement .)


state 306

    (194) selection_statement -> IF LPAREN expression RPAREN . statement
    (195) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 75
    statement                      shift and go to state 328
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 307

    (38) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODULO          reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TERNARY         reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMESEQUAL      reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQUAL        reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 38 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 308

    (196) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 75
    statement                      shift and go to state 329
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 309

    (197) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 75
    statement                      shift and go to state 330
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 310

    (198) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 331
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 311

    (199) iteration_statement -> FOR LPAREN expression_statement expression_statement . RPAREN statement
    (200) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 332
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 333
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 312

    (68) conditional_expression -> logical_or_expression TERNARY expression COLON . conditional_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 121
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123

    logical_or_expression          shift and go to state 90
    conditional_expression         shift and go to state 334
    logical_and_expression         shift and go to state 97
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115
    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    primary_expression             shift and go to state 98

state 313

    (16) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TERNARY         reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 16 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 314

    (18) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INCREMENT       reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DECREMENT       reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODULO          reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TERNARY         reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 18 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 315

    (24) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    IDENTIFIER      shift and go to state 122
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    assignment_expression          shift and go to state 335
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 316

    (30) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUALS          reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODULO          reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE              reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE              reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE              reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TERNARY         reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 30 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 317

    (164) direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)


state 318

    (165) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 336


state 319

    (168) direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)


state 320

    (169) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 337


state 321

    (161) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 161 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 161 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 161 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 161 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 322

    (167) direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 167 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 167 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 167 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 167 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)


state 323

    (163) direct_abstract_declarator -> LBRACKET constant_expression RBRACKET .

    LBRACKET        reduce using rule 163 (direct_abstract_declarator -> LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 163 (direct_abstract_declarator -> LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 163 (direct_abstract_declarator -> LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 163 (direct_abstract_declarator -> LBRACKET constant_expression RBRACKET .)


state 324

    (115) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMI            reduce using rule 115 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 115 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 325

    (118) struct_declarator -> declarator COLON constant_expression .

    SEMI            reduce using rule 118 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 118 (struct_declarator -> declarator COLON constant_expression .)


state 326

    (172) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMI            reduce using rule 172 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 172 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 172 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 327

    (174) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 174 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 174 (initializer_list -> initializer_list COMMA initializer .)


state 328

    (194) selection_statement -> IF LPAREN expression RPAREN statement .
    (195) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MODULO          reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INTEGER         reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 338

  ! ELSE            [ reduce using rule 194 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 329

    (196) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MODULO          reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING          reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INTEGER         reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 196 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 330

    (197) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MODULO          reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INTEGER         reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 197 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 331

    (198) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (83) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 339
    COMMA           shift and go to state 157


state 332

    (199) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression_statement           shift and go to state 67
    statement                      shift and go to state 340
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    expression                     shift and go to state 75
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 333

    (200) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (83) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 341
    COMMA           shift and go to state 157


state 334

    (68) conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .

    SEMI            reduce using rule 68 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    COMMA           reduce using rule 68 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    RBRACKET        reduce using rule 68 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    COLON           reduce using rule 68 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    RPAREN          reduce using rule 68 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    RBRACE          reduce using rule 68 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)


state 335

    (24) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 24 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 24 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 336

    (165) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET .

    LBRACKET        reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET .)


state 337

    (169) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)


state 338

    (195) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression                     shift and go to state 75
    statement                      shift and go to state 342
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    expression_statement           shift and go to state 67
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 339

    (198) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 343


state 340

    (199) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IDENTIFIER      reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CASE            reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SEMI            reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SWITCH          reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DO              reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GOTO            reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INCREMENT       reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DECREMENT       reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MODULO          reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TIMES           reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NOT             reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LNOT            reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRING          reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INTEGER         reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CHARACTER       reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FLOAT           reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 199 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)


state 341

    (200) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER COLON statement
    (182) labeled_statement -> . CASE constant_expression COLON statement
    (183) labeled_statement -> . DEFAULT COLON statement
    (184) compound_statement -> . LBRACE RBRACE
    (185) compound_statement -> . LBRACE statement_list RBRACE
    (186) compound_statement -> . LBRACE declaration_list RBRACE
    (187) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (192) expression_statement -> . SEMI
    (193) expression_statement -> . expression SEMI
    (194) selection_statement -> . IF LPAREN expression RPAREN statement
    (195) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (196) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (197) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (198) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (199) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (200) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (201) jump_statement -> . GOTO IDENTIFIER SEMI
    (202) jump_statement -> . CONTINUE SEMI
    (203) jump_statement -> . BREAK SEMI
    (204) jump_statement -> . RETURN SEMI
    (205) jump_statement -> . RETURN expression SEMI
    (82) expression -> . assignment_expression
    (83) expression -> . expression COMMA assignment_expression
    (69) assignment_expression -> . conditional_expression
    (70) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (67) conditional_expression -> . logical_or_expression
    (68) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (25) unary_expression -> . postfix_expression
    (26) unary_expression -> . INCREMENT unary_expression
    (27) unary_expression -> . DECREMENT unary_expression
    (28) unary_expression -> . unary_operator cast_expression
    (29) unary_expression -> . SIZEOF unary_expression
    (30) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) logical_or_expression -> . logical_and_expression
    (66) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (15) postfix_expression -> . primary_expression
    (16) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (17) postfix_expression -> . postfix_expression LPAREN RPAREN
    (18) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (19) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (20) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (21) postfix_expression -> . postfix_expression INCREMENT
    (22) postfix_expression -> . postfix_expression DECREMENT
    (31) unary_operator -> . MODULO
    (32) unary_operator -> . TIMES
    (33) unary_operator -> . PLUS
    (34) unary_operator -> . MINUS
    (35) unary_operator -> . NOT
    (36) unary_operator -> . LNOT
    (63) logical_and_expression -> . inclusive_or_expression
    (64) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (9) primary_expression -> . IDENTIFIER
    (10) primary_expression -> . STRING
    (11) primary_expression -> . INTEGER
    (12) primary_expression -> . CHARACTER
    (13) primary_expression -> . FLOAT
    (14) primary_expression -> . LPAREN expression RPAREN
    (61) inclusive_or_expression -> . exclusive_or_expression
    (62) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (59) exclusive_or_expression -> . and_expression
    (60) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (57) and_expression -> . equality_expression
    (58) and_expression -> . and_expression AND equality_expression
    (54) equality_expression -> . relational_expression
    (55) equality_expression -> . equality_expression EQ relational_expression
    (56) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . shift_expression
    (50) relational_expression -> . relational_expression LT shift_expression
    (51) relational_expression -> . relational_expression GT shift_expression
    (52) relational_expression -> . relational_expression LE shift_expression
    (53) relational_expression -> . relational_expression GE shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (37) cast_expression -> . unary_expression
    (38) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 72
    CASE            shift and go to state 73
    DEFAULT         shift and go to state 74
    LBRACE          shift and go to state 39
    SEMI            shift and go to state 71
    IF              shift and go to state 76
    SWITCH          shift and go to state 78
    WHILE           shift and go to state 79
    DO              shift and go to state 80
    FOR             shift and go to state 81
    GOTO            shift and go to state 82
    CONTINUE        shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 85
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SIZEOF          shift and go to state 96
    MODULO          shift and go to state 99
    TIMES           shift and go to state 100
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    NOT             shift and go to state 103
    LNOT            shift and go to state 104
    STRING          shift and go to state 106
    INTEGER         shift and go to state 107
    CHARACTER       shift and go to state 108
    FLOAT           shift and go to state 123
    LPAREN          shift and go to state 77

    expression_statement           shift and go to state 67
    expression                     shift and go to state 75
    statement                      shift and go to state 344
    labeled_statement              shift and go to state 65
    compound_statement             shift and go to state 66
    selection_statement            shift and go to state 68
    iteration_statement            shift and go to state 69
    jump_statement                 shift and go to state 70
    assignment_expression          shift and go to state 86
    conditional_expression         shift and go to state 88
    unary_expression               shift and go to state 89
    logical_or_expression          shift and go to state 90
    postfix_expression             shift and go to state 91
    unary_operator                 shift and go to state 94
    cast_expression                shift and go to state 95
    logical_and_expression         shift and go to state 97
    primary_expression             shift and go to state 98
    inclusive_or_expression        shift and go to state 105
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 110
    equality_expression            shift and go to state 111
    relational_expression          shift and go to state 112
    shift_expression               shift and go to state 113
    additive_expression            shift and go to state 114
    multiplicative_expression      shift and go to state 115

state 342

    (195) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INCREMENT       reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DECREMENT       reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MODULO          reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INTEGER         reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHARACTER       reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 195 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 343

    (198) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IDENTIFIER      reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CASE            reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GOTO            reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INCREMENT       reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DECREMENT       reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIZEOF          reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MODULO          reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRING          reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INTEGER         reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHARACTER       reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 198 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 344

    (200) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IDENTIFIER      reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CASE            reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMI            reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INCREMENT       reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DECREMENT       reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MODULO          reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NOT             reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LNOT            reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING          reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INTEGER         reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHARACTER       reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 200 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 328 resolved as shift
WARNING: reduce/reduce conflict in state 87 resolved using rule (primary_expression -> FLOAT)
WARNING: rejected rule (type_specifier -> FLOAT) in state 87
